// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x3d\x6f\xd3\x40\x18\x7e\x2e\x49\xbf\x5c\x28\x1f\x53\x64\x55\x22\x62\x2a\x03\x86\x22\x54\xb1\x20\x75\x01\x06\x32\x20\xc4\xd0\x2d\xca\xc7\x45\xb5\x12\xdb\xc1\x76\xa3\x40\x90\x60\x41\xea\xc8\x82\xc4\xca\xc4\x4f\x48\x37\xf8\x19\x8c\x19\x19\xcb\x44\x06\x54\xa3\xf7\x72\x97\x1c\xe7\x5c\xda\xbe\x52\x72\xf7\x3e\x77\xcf\xfb\x7d\x7e\xff\xa4\xfa\xb4\xc0\x18\x94\x30\xfc\xc1\x5c\x9b\xcb\x8f\xd2\x7c\xbf\x2f\xff\xb7\xc0\x50\x66\x40\x2f\xf2\x43\x42\xd2\x3b\x0e\x86\xee\x69\x46\x7b\xc2\xdb\x49\xe5\x90\xf6\x51\xd4\xa9\x0c\xdd\x5f\x33\x3c\xe8\xb4\x7c\xda\xc7\x95\x9d\xfe\xd0\x1d\x0b\xfc\xfb\xd7\xa9\xed\x35\x06\x8c\xb3\x2c\x1b\x15\x80\x32\x80\x8f\x00\x56\x01\x8c\xa4\xef\xcf\x72\x1d\x31\x20\x74\x80\x8e\xfb\x37\x53\x7a\x14\x04\x51\xd3\x9d\xcc\xfc\x1c\xa5\x7e\x40\x7b\x9e\xd4\x9a\x2a\xae\x91\x4c\x2e\x71\xcf\x72\x7e\x4f\xa5\xdf\x6b\x4b\xfc\x92\xdd\x7e\x3b\xa9\x89\xbc\x7a\x3c\xd4\xed\x3a\xa0\x78\x26\x56\xbb\xce\x39\x76\xf9\xa0\xd9\xa5\xfd\x51\x8b\x3b\xf9\x78\xed\x76\x37\x96\xd8\xa5\x5a\x53\x9d\xa9\x17\xd4\x07\xea\x15\xf5\x89\x6a\x43\x75\xa1\x9a\x85\x8e\x48\x89\xd2\x71\x44\x10\x14\x00\x9e\xbd\xa8\x02\x38\xcb\x32\xe1\xf7\xba\x9a\x8f\xb7\x2f\xb1\xfe\x6e\x93\x5d\xc1\xb4\x3f\x65\x6d\x46\x06\xda\x7e\x1b\xc0\x43\xcb\x99\x3a\x7f\xa5\xe9\x07\x0b\xce\xd3\x25\xe7\x36\x79\x0d\xa0\x84\xdf\xd9\xa2\xb3\x22\x8a\x0b\x39\x45\x94\x2c\xf8\x8a\x05\x5f\xcd\x61\xcf\x01\xdc\x10\x9d\x98\x8a\xb2\x78\x57\xe0\x4e\x0e\xa7\x07\x70\x53\xb3\xa3\xf2\xbb\x25\xf0\x79\x3c\xaa\x6e\x5b\x02\x2f\xe6\xf0\xc7\x02\x5f\xc9\xd9\xd9\x96\x2b\x8d\x4f\x01\xc0\x23\x4d\x2f\x6a\xf7\x98\x8c\x69\xa0\xe9\xc2\x9a\x97\xf2\x41\x8a\x4e\x2f\x8e\x1a\xfc\x1e\x8d\x87\x98\x24\x05\xfc\x37\x3e\xa8\xf5\x79\x9c\xf8\x51\xa8\x5f\xa7\x69\x12\x82\x5a\xd7\x6f\xf2\x30\xe1\xf0\x62\xde\xf5\xf8\x61\xad\x1d\xd7\x03\xae\xee\xca\x79\x43\x50\xf7\x43\xaf\x09\x2f\x49\xe3\xb4\xde\x80\x97\xbc\x09\xc4\x1a\x47\xad\x7a\x5a\x27\x78\xd7\xdb\xdd\x33\xf4\x85\xed\xb9\x94\x0c\x64\x3d\x4c\x29\xcb\x16\x7c\x33\x70\xf3\xdb\xc8\xe4\xcf\x9c\x88\x7d\x8b\x3f\x73\xd2\xd6\xce\xe1\x9b\xef\x66\xdd\x8c\xd3\xc2\x3f\xb9\x20\x7f\xcf\xc2\xbf\x2f\x13\x35\xdf\x9d\xc9\x6f\x58\xf8\xc7\x17\xe4\x1f\x4b\xfe\x03\x03\x1f\x4b\x7e\xd9\xc0\x67\xdf\x21\xb9\x7e\xb1\xf0\x27\xf2\xc2\x6d\x03\x67\xc6\x5a\xd5\xde\x84\x2e\x6e\x61\xba\x9a\xfd\x32\xfb\xef\x59\xf8\x15\x0b\xdf\xd4\x0f\xb4\x37\xaa\xcb\x8e\x04\x3e\x19\xb8\x59\x3f\xfa\x86\x6e\x20\x2f\x3f\x65\x40\x6a\x8e\xae\x02\xd8\xd4\xf8\xaa\x8e\x1f\x16\xf8\x26\x39\x91\x60\x45\x26\xac\x7a\xac\xf8\xaa\x2f\xff\x02\x00\x00\xff\xff\xeb\x45\x8b\x77\x40\x08\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2112,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629734696, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
