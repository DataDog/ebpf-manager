// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6c\xd3\x4e\x14\xff\x39\xe9\xd7\xdf\xfd\x03\x85\xc9\xb2\x3a\x44\x4c\xed\x62\x28\x42\x88\x09\x75\x01\x96\x0e\x08\x3a\x30\x20\x59\x69\x7a\x51\xad\xc4\x76\xb0\xdd\x28\x10\x24\x26\x3e\x36\x90\x10\x23\x03\x3b\x7b\x2a\x31\x20\x31\x32\x32\x31\x46\x4c\x8c\xed\x44\x06\x54\xa3\x77\xb9\x8b\xaf\xe7\x5c\x5a\xf1\xa4\xe4\xde\xfb\x9d\x7f\xef\xdb\x7e\x7e\x7b\xeb\x4e\xc5\xb2\x20\xc5\xc2\x6f\x14\x56\x21\x2b\xf3\x85\xbe\x29\xfe\xcf\xc3\x82\x63\x01\x9d\x38\x88\x08\xc9\xd6\x6d\xf4\xdd\xc3\x9c\x74\xc2\x9b\x69\x6d\x8f\xf4\x38\x6e\xd5\xfa\xee\xaf\x09\x1e\xb6\x76\x03\xd2\x93\xda\x5a\xb7\xef\x0e\x39\xfe\xe5\xe3\xd8\xf7\xa2\x05\x0c\xf3\x3c\x1f\x54\x00\x07\xc0\x0b\x00\x0b\x00\x06\x22\xf6\x7b\x71\x0e\x2c\x20\xb2\x81\x96\xfb\x27\x97\x76\x1c\x86\x71\xc3\x1d\x4d\xe2\xec\x67\x41\x48\x3a\x4b\xfd\x86\xcc\x6b\x20\x8a\x4b\xdd\xe3\x52\xdc\x43\x11\xf7\xc2\x8c\xb8\xe4\xb7\xdb\x4c\x7d\x5e\x57\x87\x45\xaa\x5f\x1b\x94\xcf\xc8\xe8\xd7\x3e\xc5\x2f\xeb\x35\xda\xa4\xef\xef\x32\xbb\x9c\xaf\xd9\xef\x7f\x33\xfc\x52\xaf\xa9\xcf\x34\x0b\x9a\x03\xcd\x8a\xe6\x44\xbd\xa1\xbe\x50\xcf\x22\x9b\x97\x44\xe5\xd8\x3c\x09\x4a\x00\x77\xef\x6d\x01\x38\xce\x73\x1e\x77\x45\xee\xc7\xd3\xfb\x58\x7a\xb6\x6c\xfd\x8f\xf1\x7c\x1c\x65\x47\x7a\x8a\xbe\x0a\xe0\xba\xe1\x4e\xde\x6f\x2b\xf6\xc3\x29\xf7\xd9\x8c\x7b\x93\x7c\x06\x30\x87\xa3\x7c\xda\x5d\x15\xd5\xa9\x9c\x2a\xe6\x0c\xf8\xbc\x01\x5f\x28\x61\x2f\x01\x5c\xe4\x93\x18\x8b\xf4\xf8\x80\xe3\x76\x09\xff\x00\xe0\x92\xe2\x47\xd6\xb7\xce\xf1\x22\x1f\xd9\xb7\x45\x8e\x57\x4b\xf8\x23\x8e\xcf\x97\xfc\xac\x8a\x93\xd6\xa7\x02\xe0\xa6\x62\x57\x95\xe7\x2c\x91\x53\x4f\xb1\xb9\x37\x2f\x63\xbd\x0c\xad\x4e\x12\xef\x30\x9f\xd6\x83\x6f\x92\x00\xae\xe8\x80\x7f\x62\x9f\xe4\x53\x27\x41\xbf\xcb\x92\x34\x98\xdc\xfa\x72\xe7\xb8\xa8\x8e\x0b\xd0\x6f\x07\x0d\x16\xa5\x0c\x5e\xc2\xda\x1e\xdb\xf3\x9b\x49\x3d\x64\xd2\x81\x58\x55\x49\x95\x66\x58\x0f\x22\xaf\x01\x2f\xcd\x92\xac\xbe\x03\x2f\x7d\x12\xf2\x33\x89\x77\xeb\x59\x9d\xe0\x0d\x6f\xe3\x86\x66\x4f\x1d\xf4\x3f\xc8\x57\xd1\x5f\x5d\x1c\x31\xd2\x23\x0d\xd7\xbf\xb5\x96\xf8\xe9\x1b\xb6\x69\x88\xa7\x6f\xae\x73\x0a\x5f\x7f\x0f\x97\x34\xfb\x96\x81\x7f\x70\x46\xfe\x63\x03\xff\xaa\x28\x54\x7f\x8f\x75\xfe\x27\x03\xff\xf5\x19\xf9\xdf\x05\xff\x9a\x86\x0f\x05\xdf\xd1\xf0\xc9\x77\x4d\x9c\x3f\x0d\xfc\x91\x78\xe0\xb2\x86\x5b\xda\xf9\x4a\x79\xc7\x54\x71\x2b\xe3\x53\x9f\x97\x3e\xff\x6d\x03\xbf\x66\xe0\xeb\xf6\x3b\xe5\x9d\x57\x65\x4d\x00\x6f\x35\x5c\xef\xdf\x1b\x40\xf9\x8a\x15\xf2\x43\x24\x24\xf7\xe8\x1c\x80\x65\x85\x2f\xfb\xf8\x6d\x4a\x6c\x92\x03\x01\xd6\x44\xc1\x72\xc6\x92\x2f\xe7\xf2\x37\x00\x00\xff\xff\xac\x13\x37\x0a\x90\x08\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2192,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629893982, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
