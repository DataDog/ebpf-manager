// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe1.o
// ebpf/bin/probe2.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbe1O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x31\x6f\xd3\x40\x14\x7e\x4e\x9a\xa4\x4d\x01\x01\x42\xa8\xb2\x22\xe4\x8d\x04\x84\x4b\x10\x2a\xdd\xa8\x14\x01\x4b\x85\xaa\xaa\x62\x0d\x87\x73\x6d\xad\xba\x71\x64\xbb\x34\x8d\x91\xe8\x82\x54\x75\xea\xc2\xc2\xc6\xc6\x3f\xc8\xd8\xb2\x75\xec\xd8\xb1\x23\x62\x2a\x13\x88\x01\xa3\x77\xbe\x8b\xcf\x17\xbb\xa8\x3b\x4f\x4a\x7d\xef\xbb\xf7\xee\x7b\xef\xdd\x7b\xd7\xf7\xcf\x16\x9f\x17\x34\x0d\x84\x68\xf0\x13\x12\x2d\x91\x87\x95\x64\xbd\xc0\xff\x5e\x03\x0d\x0e\x6f\xc7\xd8\x50\x03\x68\x54\x01\x36\xf4\x5f\x11\xea\x33\x1a\xc0\x96\x47\x3b\xb8\x36\xea\x2b\xad\x50\x3f\x1f\xe1\x1b\x34\x30\x70\x6d\x91\x5e\x10\xea\xdf\x46\xb8\xd1\xa5\xdb\xcc\xbe\x47\xac\x50\x3f\x8b\xc4\xb9\x28\xbe\xfe\x3b\xb6\xab\x00\xd8\xd4\x9b\xc5\xb5\xdb\xa5\x8d\x70\x70\x1a\xe3\x93\x00\x75\xcb\x21\xcc\xd6\xb7\x57\xc3\xfd\x13\x86\x1f\x7e\x8e\xfd\x2b\x1a\xc0\x49\x14\x45\xc3\x02\xc0\x7d\x00\xf8\x00\x00\x65\xdc\x27\xf1\xfe\x4c\x21\x9d\xef\xb0\x08\xac\x0e\x68\x77\x85\xc7\x51\x85\x74\x7e\xc4\x71\x58\x1e\xf5\x95\x56\x43\xce\x2f\x30\x02\x76\xaa\xed\x18\x56\x2a\x3f\xcb\xdd\xc2\xb5\xd3\xe9\xde\x15\xf9\x89\xf8\x2f\x8a\xf7\x9e\x14\xef\x90\xc7\xf7\x91\x7f\xc7\xeb\x9f\xf0\xd1\x54\xfd\xcf\x46\xb8\xe3\x18\x01\xae\x3d\x7b\x6d\x2d\xd4\x4f\x93\xf8\x02\x62\xb3\xf8\x0c\x8b\x84\x7a\x1c\xcf\x90\xdf\xbb\x3f\xf8\x3e\xaa\xb3\xa8\x7f\xb0\xed\x36\xc2\xfd\xe3\x18\x9f\x52\xea\xff\xe9\x68\x2c\x9f\xa3\x4b\xd6\xbf\x20\xd5\x9f\xe5\xd3\x31\xea\xb8\xb7\xd2\x6a\x54\xe5\xba\x8a\x7b\x58\x25\xb6\x93\xca\x33\x75\x0f\x52\x9e\xb4\xcf\xf2\xa7\x5e\x77\x94\xa7\xc8\x43\xc4\xed\x0f\xce\x73\xe3\x6f\x5e\x70\x1f\x45\x00\x98\xe0\xbf\x22\xfc\x17\x55\xb0\x47\xb0\x3f\xb0\x87\x70\x7e\x71\xe6\x71\xde\xf1\x4d\xc0\xf7\x00\xdf\x0c\xec\x57\xec\xe5\x4c\x7b\xcb\xdd\xc2\xf9\xc1\x19\xc3\x7b\xc5\xbb\x97\xcc\x53\xf6\xd8\x9f\x92\x59\x80\xfd\x4e\x2f\x38\x9f\xd9\xd3\x7e\x80\x7d\xe1\x48\x8e\xd8\x57\x23\xaf\x17\x4b\x8b\xe8\xf7\x27\x8a\x58\x7f\x5c\xe7\xbc\xda\x60\x19\x26\xdf\x4d\x6b\xac\x57\xf9\x4f\xc8\xae\xf4\xa0\xd6\x00\xe0\xb1\xb4\x77\x90\xf5\xd8\x66\xc8\x6b\xd6\x53\x3f\xa2\xac\xbd\x62\x4e\xa7\x15\xa1\x34\x86\xcd\x01\xc0\x0d\x98\x1a\xe9\x13\xfc\xfb\x80\xe1\xd5\x31\xfc\x25\x00\xdc\x94\xce\x17\xb9\x94\x99\x7d\xf2\x4f\xa1\xc6\xf1\x06\xb3\x2f\x8d\xe5\x77\xcc\x75\x54\x2b\x19\x7a\x4d\xd2\x71\xee\xe7\x25\x9d\xb1\x6f\x92\x9e\x3f\x1b\x58\xed\x9e\xe7\xae\xb5\x89\xe7\x91\x1d\x30\x03\x1c\x64\xd3\xa3\x4e\xfa\x12\xa1\xfd\x96\x7a\xbe\xed\x76\xa1\xed\xd8\x16\xed\xfa\x54\x35\x72\xbb\x31\x64\xd2\xf5\xf6\xaa\x47\x36\x29\xe0\xb1\x4d\xd3\x02\xd3\x0f\xbc\x80\xbc\x01\xd3\xdf\xd9\x64\x5f\xcf\xed\x90\x80\x20\xdc\x34\x9b\x73\x99\x75\xbe\x8c\xac\xe7\xbc\x0b\x5f\xca\xf1\x77\x4f\xc1\xd5\xf6\xb8\xc5\xb1\xb2\x82\x2f\xe4\xf0\x4d\x28\x7a\xeb\x1f\xfe\xbb\x0a\xe1\xa4\x62\xf7\x14\x40\xea\x9e\x44\xd6\xf9\x81\x62\x1e\xae\xf2\x3c\x85\xbf\xc0\xef\xe4\xf0\x1f\x71\x5e\x75\x1e\x54\x7e\x3d\x87\xbf\x9f\xc1\x5f\xca\xe0\xd7\xe4\x9e\x92\x64\x89\x03\x35\x85\x5f\xad\x5f\x9f\xfb\x3f\x52\xf0\x1e\x37\xfc\xaa\xe0\x32\x2f\xca\x93\x1c\xfe\x66\x29\x9b\x4f\xbd\x7f\x33\xc7\x7f\x3e\xc7\x5f\xd5\x5f\x49\x33\x26\xcb\x02\xf7\x5f\x52\x70\xb5\xfe\xcb\x39\xf5\xdf\xe3\xf5\x37\xb8\x8e\xf5\x9f\xce\xa8\x7f\x2f\x83\x1b\xe5\x80\xf3\x9f\x72\x5d\xe3\xb1\x0b\x7f\xf1\x9e\xfe\x0d\x00\x00\xff\xff\xe6\xe6\x4c\x62\xb0\x0a\x00\x00")

func bindataProbe1OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbe1O,
		"/probe1.o",
	)
}



func bindataProbe1O() (*asset, error) {
	bytes, err := bindataProbe1OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe1.o",
		size: 2736,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878644, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProbe2O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbf\xcf\xd2\x50\x14\x3d\x8f\x0f\xf9\xfa\x7d\x3a\x80\x13\x36\x9a\x74\x13\x06\xaa\x30\x18\x17\x13\x12\x7f\x31\x30\x10\xe3\x8e\xb5\x3c\xa0\x49\x01\xf3\xfa\x62\xd0\x9a\x38\xb9\xbb\xf8\x07\xf8\x57\x30\xba\x3a\x32\x3a\x3a\x3a\xea\xa4\x83\xf1\x99\x5b\xdf\x2b\xcd\x6b\x51\x4f\x52\x7a\xef\x81\x7b\xef\x39\xf7\x3d\x5e\xdf\x1f\x3f\xa8\x31\x06\x03\x86\xef\x38\x64\x07\x6c\x6b\x87\x78\xa8\x3f\xcf\xc1\xb0\x63\xc0\xe3\xbb\xdd\xf3\xd0\xfd\xa1\x88\x6d\x33\x60\xb1\xe0\x82\x62\x3e\xf3\x3a\xa9\xfb\x35\xe7\xc3\x20\x8e\x29\xf6\xa4\x88\x52\xf7\x4b\xce\xf3\xae\x27\x29\x0e\xa2\xd8\x4b\xdd\xcf\x39\x1f\x71\x71\x83\x62\xb9\x14\x3c\x75\x3f\xe5\x7c\x27\x8c\x03\x8a\x93\x24\x9a\xa7\xee\x3e\xe3\x77\x5a\x74\xe2\xfe\xcc\xf2\x0f\xef\xff\xe4\xa7\x0c\xd8\x2b\xa5\x76\x35\xa0\x07\xe0\x0d\x80\x06\xfd\x5e\x7b\x79\x67\xf9\xa4\xde\xd4\x97\x66\xd3\x5c\xd2\x46\xba\x48\x3b\xe9\x26\x6f\xe4\x8b\x3c\xe3\xe1\x64\x4c\x35\xbf\x94\x52\x4d\xb3\xbf\x97\x8f\xe0\xbc\xba\xc8\x2e\x91\x56\xfd\x18\x7c\xac\xd8\xab\x8d\xdb\x00\xea\xf8\xa6\xaa\xbe\x3b\xc1\x49\x89\xa3\xb9\x2d\x5c\xc8\xf3\xba\x7e\x9f\x66\x7c\xa3\xc4\x0f\x00\x5c\x2e\xf4\x31\x9a\xae\x1a\xfd\x00\xb2\xa3\xf6\x25\xdf\x4a\x4c\x9f\x73\x91\x44\x9b\x35\xa6\x71\x14\xf2\x75\xc2\xe1\x0b\x1e\xfb\x7c\x39\x9d\x8b\x60\xc5\x61\x6f\x0b\xcf\xc4\x66\x31\xf0\x43\xf8\x89\x14\x32\x78\x0a\x3f\x79\xb1\xca\xde\x62\x33\x0b\x64\x40\x74\xdf\xef\xdf\xfa\x8f\x4d\xfc\x1d\xc3\x6c\x1f\x65\xb4\xf5\x3d\x7d\x62\xf1\xf6\x9d\x66\xfa\x69\x54\xf4\xad\x42\xdd\xca\xaf\xff\xa3\xde\x3e\x6b\xc7\xca\x27\xba\x7e\x60\xf1\x4d\x2d\xb4\x67\xf3\x96\x8f\x96\x8e\xed\x1d\xdc\x61\xd5\x7a\x6d\xff\xce\x91\xfa\x7b\x47\xea\xed\xfc\x5a\xf1\xae\x14\x30\xd2\xf5\x37\x2b\xe6\x15\x71\x05\xc0\x19\xca\x70\x74\x43\xe3\xf7\x4c\xdf\x65\x53\x6f\xf8\x51\xc5\x6c\xc2\x56\xcf\x7f\xab\x73\xe3\xd1\xd4\x9b\xff\xe3\xef\x00\x00\x00\xff\xff\x3d\x2d\x33\x09\xf8\x04\x00\x00")

func bindataProbe2OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbe2O,
		"/probe2.o",
	)
}



func bindataProbe2O() (*asset, error) {
	bytes, err := bindataProbe2OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe2.o",
		size: 1272,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878645, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe1.o": bindataProbe1O,
	"/probe2.o": bindataProbe2O,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe1.o": {Func: bindataProbe1O, Children: map[string]*bintree{}},
		"probe2.o": {Func: bindataProbe2O, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
