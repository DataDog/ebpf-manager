// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x68\x24\x45\x14\x7e\xdd\x99\xd9\x49\x26\xeb\x9a\x8d\x8a\x71\x98\x43\xc1\x12\xdc\xf5\x67\x36\xd3\x11\xf1\x18\x17\x56\x2f\x01\x45\x14\xbc\x8d\xbd\xd3\xed\x4e\x9b\x74\xcf\xd0\x5d\x68\x62\x04\xd7\x83\xa0\x07\x61\x2f\xa2\x27\xf1\x07\x3d\x7a\x12\xc6\x93\xbb\x17\x61\x0f\x1e\x02\x5e\x82\x17\xf7\xe0\x41\xd0\x83\xee\xc5\x15\x82\x2d\xaf\xea\x75\x4f\x6d\x75\xd5\x9a\xcc\x2d\x98\x82\xe9\xae\xf7\xd5\x7b\xf3\xbd\x7a\xf5\xde\xab\x99\xb7\x2f\xae\x3f\xe3\x3a\x0e\x14\xc3\x81\xbf\x60\x22\x4d\xc6\xd9\x7b\x27\xf3\x35\x7a\xde\x07\x0e\x8c\x1d\x10\xfa\xfd\xd6\x7e\x8e\xe8\xb5\xcf\xa5\x4e\xc3\x05\xd8\xcf\xf3\x7c\x49\xfb\xb2\x77\x41\xea\xbf\x04\xa7\x85\x8c\xf6\x4d\x00\xd8\x68\xfd\x2a\xec\x51\x3f\xca\x58\x88\xf3\x78\xc4\xb7\x77\x5a\x37\x4b\x3c\x38\xc7\x62\x9c\xfb\xa3\x2e\xdb\x69\xed\x95\xf8\xd9\x78\x23\xc0\x79\x94\xb2\xe5\x9d\xd6\xae\xf4\xe3\x33\xf2\xc3\x01\xd8\xcd\xf3\x7c\xec\x02\xb4\x90\x6f\x46\xf2\xa3\x1f\x27\x00\xa0\x0e\x0f\x96\x7e\xe0\xc8\x5a\xb7\xf2\x42\x0e\x9a\xe8\xd7\x1f\x25\x0f\x5b\x0e\x98\xe0\xe7\xc8\x33\xf1\xb7\x3f\x4c\xb8\xc0\xa3\x24\x9b\xd6\x5f\xbf\x26\xf9\xfd\x2f\xf7\xad\xfe\x9f\x31\xf8\x3f\xa6\xb8\x7e\x48\xef\xa3\x78\x1e\xee\x11\x3f\x0f\xf7\x10\xe7\x81\xf2\x23\x42\xbe\x7d\xc8\xf3\x39\x53\x7e\x9f\x3f\xea\x36\xfb\xca\x7e\x8b\x38\x44\x09\x8b\xd5\xfd\x26\x97\xd9\x32\xce\x03\xe6\x73\x75\xbf\x2c\x4a\x32\x9c\x87\x29\x8f\x8a\xfd\x0a\x3c\x0d\x45\xdc\xd8\x72\x70\x6e\xa7\x75\xc3\x10\x1f\xfc\x9e\xeb\xf9\x9d\xe7\xf3\x7b\x6e\x8b\xd3\x75\x8a\xd3\xe3\x4a\xde\x8e\x6b\x72\xff\x45\xbc\xf4\xfd\x5f\xfb\x82\xe4\x19\x80\xdb\x86\x78\x8c\x6b\x93\xb8\xb8\x22\x5f\x1e\x2a\xe3\x12\x0c\x9b\xd0\x57\xf2\x63\x10\x25\x97\xc5\x7e\xf8\x90\xa9\xf9\x11\xa6\xe1\x63\x02\x4f\x86\x5c\x8d\x57\x1a\xfa\x62\x9f\xdb\x8c\x0f\xee\x88\x57\xe0\xcb\x7c\x62\xfe\xe6\xb4\xf1\x32\xc5\xe5\x89\x29\xea\xf9\xff\x9c\x3f\xee\x71\xfe\x18\xf3\xe7\x6e\xfd\x07\xb7\x5f\xa3\x4f\x13\x8e\x87\x3a\x8e\x63\x63\x1f\xcf\x3e\xbf\x0e\xff\xe4\x79\x8e\xb9\x88\xf7\x22\xde\x9d\x78\x6f\xe2\x6f\x01\xfc\x1d\x50\xc4\x4b\x5f\xc7\xbb\x17\xef\x5d\xec\x29\x78\x2f\x07\x5a\x60\xa5\xbe\xcf\x31\xf7\x85\x55\x94\x64\xd8\x47\xb0\xd7\x90\x05\xc3\x3e\x84\x3d\xca\xa8\x1f\xf8\x1c\xeb\x08\x6b\x0d\xeb\x0c\x6b\x11\xeb\x10\x6b\x15\xeb\x14\x6b\x18\xc7\x02\xf1\x39\x6f\xbe\x00\xb3\x6f\xcd\x3b\x27\xb1\xb6\xe8\x53\x8c\xab\x4a\x6f\x68\x83\xac\x27\xd3\x5a\xb1\xfe\xa2\x22\xaf\xb9\xd5\x75\x7e\x97\x75\xdb\xf8\x48\xe4\xdf\x9f\xb9\x8e\xff\x2d\x9e\x33\x70\x43\xc3\x7f\x24\xfc\x8a\xe6\xdf\x2d\xf1\xac\x57\xf4\x7f\x20\x5c\xd7\xff\x4d\x3c\x1b\x30\xd0\xf0\xef\x09\x5f\xd1\xfc\xff\x45\x3c\xe7\x2a\xfa\xdf\x11\xae\xeb\x4b\x2f\x67\xaa\xa0\xc0\xeb\x16\xbc\x61\xc1\xe7\x2a\xd8\x15\x00\x38\x0d\xf7\x94\x32\xb5\x75\x78\x43\xe0\xa7\x2a\xf8\x6b\x00\xb0\xa8\xf8\x53\x9c\xaf\x27\xf0\x7a\x05\x7f\x4e\xe0\x13\x7f\x8a\xf3\x7c\x40\xe0\x73\x15\xbc\xee\x20\xef\x7c\x89\xb7\xe9\x7b\x7e\x16\xfe\x9c\xac\xe0\x8c\x64\x14\xef\x37\xc8\x2b\x9a\xbc\xe6\x1c\x6e\xbd\xad\xac\x63\x45\x3c\xa5\xc8\xe8\xe5\xcb\x8a\x8c\xde\x6d\x29\xb2\x88\x6a\x87\x87\x5b\x1c\x3a\x69\xb8\xb9\x91\x86\x7c\x94\x0e\x2f\x85\xe7\xcb\x59\x8f\xaa\x52\xae\xd3\xa2\x61\xc5\x66\x69\xb3\x83\xde\xeb\x61\x9a\x45\xc3\x04\x7a\x9b\x51\x3f\x4c\xb2\x50\x68\x76\xc2\x41\xef\xd5\xd4\x8f\x43\x88\xfd\x28\xe9\xf4\xa1\x93\xf1\x94\xfb\x97\xa0\x93\x6d\xc7\xe2\x9d\x0e\xb1\x2f\x20\xdc\xed\x74\x9f\x84\xf5\x0b\x17\x56\x7b\xab\xf8\xf2\xe4\xab\x2b\x5f\x2b\xbd\x55\x88\xfd\x51\x76\x3e\xf6\x47\x9e\xd4\xf2\xa4\x96\x27\xb5\x3c\xa9\xe5\x95\x5a\xdd\x4a\xe6\x4d\x37\x3e\x11\x79\x5c\x1d\x4b\x94\xaa\x4d\xad\xae\xf4\xff\xe0\x0e\x7d\x4e\x68\xf8\x9a\x85\xaf\xa6\xc9\xfd\xff\xb0\xd7\xfb\xdd\xac\xa6\xd7\x13\x55\x5e\x1d\x5b\x54\x82\x45\xbf\x5d\xa4\x7d\x16\xf6\x05\xfe\xa8\x85\x7f\xd7\x39\x18\xff\xc3\x16\xfe\xf7\x0c\xfc\x75\x03\xff\x45\x0b\xff\x2b\x74\x28\x7a\xbf\xd6\xf9\x9f\xb6\xf0\x7f\x4c\xfc\x4c\xe1\x6f\x18\xf8\xe7\x2d\xfc\x9f\xd6\x0f\xc6\xdf\xb0\xf0\x7f\x6b\xe0\x9f\x33\xf0\x03\xfd\x8f\xd0\x73\xf0\x26\xb5\xb8\xb6\x16\x7f\x3d\x7f\x7e\x02\xb3\xfd\xfe\xec\xc1\xec\xdf\xb1\xd8\x2f\x35\xcd\xfa\x7a\xfe\x6f\x59\xec\xdb\x16\x7b\x5d\xfe\x9a\xec\x3d\x0d\x67\x64\xff\x8d\x86\x2f\x68\x7e\x7c\x40\x73\xfd\x9a\xdb\x23\xfb\xab\x1a\xae\x9f\xdf\xfb\x96\xf3\xdb\xa3\xf3\x2b\xea\x70\x91\xb8\xf5\xf3\xfb\xca\xc0\x8d\x63\x40\x57\xce\x82\x3b\xf1\xf7\x94\x62\x5f\xfc\xde\xf9\x37\x00\x00\xff\xff\x54\x1b\x1e\x64\xe8\x13\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 5096,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878672, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
