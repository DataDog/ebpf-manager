// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x68\x24\x45\x14\x7e\xdd\x99\xd9\x49\x66\xd7\x98\x8d\x8a\xd9\x66\x0e\x25\x4b\x64\x57\xd6\xd9\xcc\x44\xc4\x93\x84\x80\x7a\xc9\x41\x45\xc1\xdb\x58\x3b\xdd\xee\x34\x49\xf7\x0c\xdd\x85\x24\x8e\xa0\x08\x8a\xc7\x05\x15\x3c\x28\xf8\xc3\x1e\x3c\x2b\x8c\x78\xd9\xc5\xd3\xe2\x29\xc7\xe0\x69\xbd\xed\x41\xf0\xe7\xa0\x0b\x0e\xb6\xbc\xaa\xea\x9e\x9a\xea\xaa\x35\x93\x5b\xd8\x3c\x98\x74\xbf\xaf\xde\xab\xef\xd5\xab\xf7\xaa\x3a\xef\x3c\xb7\xf5\xbc\xeb\x38\x90\x8b\x03\x7f\xc3\x44\x9b\xc8\xc6\x83\xca\xbb\xfc\xfb\x10\x38\x30\x72\x80\xdb\x77\xbd\x71\x86\xe8\x8d\xaf\x84\x4d\xcd\x05\x18\x67\x59\xb6\xa2\x4d\xf6\x3e\x08\xfb\x57\xe1\x2c\xd7\xd1\xbf\x0e\x00\xdb\xde\x1d\xee\x8f\xf6\x61\x4a\x02\x7c\x8f\x06\x6c\x6f\xe8\xdd\x2e\x70\xff\x22\x89\xf0\x9d\x0e\x5a\x64\xe8\x1d\x14\xf8\x85\x68\xdb\xc7\xf7\x30\x21\xab\x43\x6f\x5f\xc4\xf1\xa5\x8c\xc3\x01\xd8\xcf\xb2\x6c\xe4\x02\x78\xc8\x37\x27\xf8\x31\x8e\x53\x00\x50\x85\x47\x8b\x38\x50\x52\xef\xcf\x2c\xd7\xfd\x3a\xc6\xf5\x7b\xc1\x43\x56\x7d\xc2\xf9\x19\xf2\x4c\xe2\xed\xf6\x63\xc6\xf1\x30\x4e\x8f\x1a\x2f\xad\x08\x7e\x7a\x7d\x6c\x8d\xff\xbc\x21\xfe\x91\xcc\xeb\x27\xf2\x79\x1c\xf7\xc3\x3d\xe6\xfb\xe1\xce\xb0\x1f\xa8\x3f\xc1\xf5\xbb\x33\xee\xcf\xf9\x62\x3e\x3a\x68\xd5\xbb\xca\x7a\xf3\x3c\x84\x31\x89\xd4\xf5\xc6\x57\xc9\x2a\xbe\xfb\x84\x32\x75\xbd\x24\x8c\x53\x7c\x0f\x12\x16\xe6\xeb\xe5\x78\x12\xf0\xbc\x91\x55\xff\xe2\xd0\xbb\x65\xc8\x0f\xce\x73\x33\x9b\xde\x9f\x5f\x33\x5b\x9e\x6e\xca\x3c\x3d\xa9\xd4\xed\xa8\x22\xd6\x9f\xe7\x4b\x5f\xff\x8d\xaf\xa5\x3e\x07\x70\xd7\x90\x8f\x51\x65\x92\x17\x97\xd7\xcb\xb9\x22\x2f\x7e\xbf\x0e\x5d\xa5\x3e\x7a\x61\x7c\x95\xaf\x87\xf5\x89\x5a\x1f\x41\x12\x5c\xe2\x78\xdc\x67\x6a\xbe\x92\x80\xf2\x75\xee\x11\xd6\x9b\xca\x97\x4f\x45\x3d\x11\xba\x73\xd4\x7c\x99\xf2\xf2\xd4\x11\xfa\xf9\x7e\xae\x1f\xf7\xa4\x7e\x8c\xf5\x73\xaf\xf3\x07\x97\x5f\x91\xbf\x3a\x9c\x88\x2a\x27\xb9\xb1\xcb\x0b\x2f\x6e\xc1\xbf\x59\x96\x61\x2d\xe2\xbd\x88\x77\x27\xde\x9b\xf8\x2d\x80\xdf\x01\x79\xbe\xf4\x71\xbc\x7b\xf1\xde\xc5\x33\x05\xef\x65\x5f\x4b\xac\xb0\xa7\x0c\x6b\x9f\x7b\x85\x71\x8a\xe7\x08\x9e\x35\xd2\x83\xe0\x39\x84\x67\x94\xd1\xde\xa7\x0c\xfb\x08\x7b\x0d\xfb\x0c\x7b\x11\xfb\x10\x7b\x15\xfb\x14\x7b\x18\x65\x49\xf2\x39\x6f\xbd\x0c\xf3\x6f\x9f\x76\xce\x60\x6f\xc9\x5f\x2e\xd7\x94\xb3\xa1\x01\xa2\x9f\x4c\x63\xf9\xf8\x2b\x8a\xbe\xe1\x96\xc7\xd9\x3d\xc6\x6d\xf2\x2d\xaf\xbf\x3f\x32\x1d\x7f\x84\xf3\xcf\xc1\x2d\x0d\xff\x0d\x04\xfe\xae\x16\xdf\x22\xd7\xab\x25\xfb\x3b\x20\x70\xdd\xbe\xc6\xf5\x1a\xf4\x34\xfc\x17\x31\x0a\x6b\x7a\xfc\xdc\x6e\xa1\x64\xff\x33\x08\xbc\x64\xcf\xa3\x9c\x2b\x83\x1c\xaf\x5a\xf0\x9a\x05\x5f\x28\x61\x9f\x01\xc0\x59\x78\xa0\xd0\xe5\xb1\x0e\x1f\x71\x7c\xb1\x84\x53\x00\x58\x56\xe2\xc9\xf7\xf7\x1c\xc7\xab\x25\xfc\x25\x8e\x4f\xe2\xc9\xf7\xb3\xc6\xf1\x85\x12\xfe\x98\x83\xbc\xa7\x0b\xbc\x21\xe7\xf9\x87\xc7\x73\xa6\x84\x13\xa9\xa3\xfa\xb0\x41\x5f\xd3\xf4\x0d\x67\xb6\xf1\x86\x32\x8e\x1d\xf1\x8c\xa2\x63\x94\xaf\x29\x3a\x46\xb7\xab\xe8\x3c\xab\x4d\x16\xec\x32\xd8\x4e\x02\x36\x48\xfa\x57\x82\x8e\xec\x43\xd8\x9e\x56\x9b\x49\xb0\x53\x18\x5d\x9e\x42\xa7\x21\x6d\xa6\xa9\x79\x4c\xb3\x94\xe6\x80\xce\x9b\x41\x92\x86\xfd\x18\x3a\x3b\x61\x37\x88\xd3\x80\x9b\x34\x83\x5e\xe7\x8d\x84\x46\x01\x44\x34\x8c\x9b\x5d\x68\xa6\x2c\x61\xf4\x0a\x34\xd3\xbd\x88\x3f\x93\x3e\x9e\x19\x08\xb7\x9a\xad\xa7\x61\x6b\x73\x73\xbd\xb3\x8e\x8f\xb6\x78\xb4\xc4\x63\xad\xb3\x0e\x11\x1d\xa4\x97\x23\x3a\x68\x0b\xab\xb6\xb0\x6a\x0b\xab\xb6\xb0\x6a\x17\x56\xad\x52\x55\xce\x2e\x3f\xf0\xfa\x2e\xcb\x8a\x2c\xe1\xc7\xb5\x7e\xd3\xff\x37\x77\xe4\xef\x94\x86\x6f\x58\xf8\x2a\x9a\xfe\xc1\xff\xf8\xeb\xe7\xe0\xbc\x66\xf7\x1e\xef\xfe\xb2\xec\xca\xd6\xcc\xcf\xe1\x65\xb9\xce\xdc\x3f\xc7\x37\x2d\xfc\xfb\xce\xe1\xf8\x9f\xb5\xf0\x7f\x68\xe0\xaf\x1a\xf8\x13\x0b\xff\xeb\x72\x53\xf4\x73\x5c\xe7\x8f\x2d\xfc\x9f\x4a\x7e\xa2\xf0\xd7\x0c\xfc\x97\x2c\xfc\x5f\x54\x0f\xc7\x7f\xc1\xc2\xff\xbd\x81\x7f\xc1\xc0\xdf\x90\xff\x5f\xe8\x35\x78\xbb\x36\x19\x57\x45\xaf\x9f\xbf\xc0\xec\x3f\x9e\x3f\x9c\xff\xe7\x16\xff\x95\xba\xd9\x5e\xaf\xff\x8f\x2d\xfe\x0d\x8b\xbf\xae\xff\x24\xfd\xdb\x1a\x4e\xa4\xff\x77\x1a\xbe\xa4\xc5\xf1\x8d\x7c\xd7\xaf\xbf\x03\xe9\x7f\x4d\xc3\xf5\xfd\xbb\x6e\xd9\xbf\x03\xb9\x7f\x79\x1f\x2e\x4b\x6e\x7d\xff\x7e\x34\x70\xa3\xf4\xe4\x55\xb4\xe4\x4e\xe2\x5d\x54\xfc\xf3\xef\xa0\xff\x02\x00\x00\xff\xff\xd8\x31\x5e\xf0\x00\x14\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 5120,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629886431, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
