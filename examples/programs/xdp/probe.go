// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x4f\x22\x41\x1c\x7d\x03\x1c\x9f\x57\x70\x1f\xc5\x65\xb9\x4b\x68\x2e\x39\x9a\xbd\xe3\x2e\xb9\x90\xab\xc8\xe5\x3e\x12\x43\x41\xac\x8c\x0d\x59\x97\x51\x37\xc0\x42\x76\x57\x45\x31\xb1\xb2\xb7\x31\xa1\xf5\xaf\xa0\xb4\xf5\x4f\xb0\xa4\xb4\xd4\x4a\xa3\x89\x6b\x66\x9c\x81\xcd\x0f\x88\xbc\x64\x98\x79\x8f\x79\xbf\x2f\x86\xa3\xbf\xb5\x7f\x31\xc6\xa0\xc1\x70\x8b\x29\x9b\xa2\x12\x9b\x9e\xab\xea\x33\x0b\x86\x91\xba\xec\x1b\xf7\xa1\xd8\x05\x2f\x65\x81\x96\x71\x27\xf9\x07\x06\x78\xbc\x59\x14\xe7\x2f\x6b\x7f\xea\x03\xe3\x7a\xa2\xf3\xa0\x68\x8b\xb3\xd5\x0b\x76\x06\xc6\xd5\x44\x77\xf9\x9e\xbc\xdf\xb3\xec\xd6\xc0\x18\x4b\xfd\xfc\xec\x39\x4f\x8a\x01\xe3\x30\x0c\x47\x31\xa0\x00\xe0\x18\x40\x52\xe4\x05\x20\x4a\x3c\x25\x75\x8b\x58\x22\x8e\xc8\x25\xf2\x88\x5a\x44\x1d\xa5\x2c\xfe\xd7\x6b\xc0\x63\x18\xca\xf8\x79\xdd\xff\xc1\x2a\xd2\x87\x39\xf6\x5a\xd4\xa2\x96\xc6\x70\xce\x5c\x28\x7e\x00\x48\xe0\x26\x9c\xf7\x5d\x1c\xf1\x19\xed\x23\x80\x37\x78\x35\xe1\x09\xb5\xbf\x93\x7a\x72\x46\xcf\x01\x78\x1b\x89\x33\x8c\xc4\x91\xf5\xab\x39\xc0\x0c\x78\x3f\x40\xbf\xd9\xfb\xea\xb8\x5b\x1e\xf7\x7d\x34\x76\xb9\xe7\x3b\x5d\x17\x8d\xb6\x63\x73\xd7\xe7\x30\x3d\xde\x36\xf9\x76\x63\xd3\xb3\x3a\x1c\x1d\xcb\x71\x4d\x1b\xa6\x1f\x78\x81\xb5\x01\xd3\xdf\xef\xc8\xdd\xeb\x36\xad\xc0\x12\x72\xd9\x2c\xff\x5c\x62\x06\xcb\xe0\x97\x9c\xc7\x2c\x2e\xd5\x7b\x5a\x27\x3a\x7d\x93\x4c\xad\x24\xd1\xab\x0b\xf2\x25\x08\x4f\xbd\xe0\xa7\xbf\x75\x9a\xf0\x15\xe5\xff\x4e\xf4\xb1\xda\x0b\x44\xcf\x93\x3e\x3e\xa9\x33\x9d\xc1\xc3\x82\x7a\x69\xff\xef\x17\xf8\xf5\x45\xea\xa7\xbc\x14\x7d\x2b\x11\xa4\x95\xff\x1b\xd5\x09\xff\x0c\x20\x43\x73\x03\xb8\x50\x7e\xdd\x6f\x46\xcd\x5a\xfb\xb5\xfe\x7b\x4e\x6e\x81\x8a\xf2\x9f\x44\xda\x89\x47\xfc\xfa\xff\xf8\x14\x00\x00\xff\xff\x69\x0d\x08\x3e\xb8\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1208,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878492, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
