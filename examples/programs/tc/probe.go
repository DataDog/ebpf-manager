// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xbf\x6f\x13\x31\x18\x7d\x4e\xa2\xa6\xa4\x0c\xd0\x09\x9d\x3a\xdc\x00\x52\x2b\xc1\xa1\x22\xa8\x98\x50\x44\x05\x2c\x1d\x2a\x28\x13\x43\x74\x5c\xdd\x72\x22\xb9\x54\xf6\xf1\x33\x48\x4c\xec\x2c\x48\x8c\xe5\x3f\x60\xcb\x08\x7f\x42\x47\xc6\x2e\x48\x0c\x0c\x45\x42\x62\xe3\xd0\xe7\x7c\xbe\x58\xce\x1d\x41\x3c\xc9\xb5\xbf\x57\x3f\xfb\xf9\xd9\x97\xd7\xb7\xb6\x6e\x37\x84\x80\x85\xc0\x2f\x4c\xab\x29\xde\x37\xa7\xe3\x2e\xff\x5d\x82\xc0\x58\x00\x9b\x6b\x1d\x24\xc1\x49\x41\xec\x39\x01\xec\x2b\xa9\x69\xac\xc3\xd5\x9d\x51\xf0\xad\xe4\x95\xdc\x0d\x69\x3c\xcc\x42\x39\x0a\x8e\x4b\x5e\xe6\x61\x42\xe3\xf8\x20\x7f\x32\x0a\xbe\x94\x7c\x26\x9f\x99\xf9\x07\x71\xf2\x78\x14\x1c\x19\xfe\xd3\x87\x89\x87\xb6\x00\x8e\x8a\xa2\x18\x37\x80\xf3\x00\xde\x00\x58\x00\x30\x66\x8f\xef\xb8\x27\x7f\x3b\x9b\x6b\x1d\xd7\x5f\xb6\xaf\xa4\xf1\xa7\xc3\xd5\x1a\x7f\xe9\xff\xfa\x1b\x73\x78\x3a\xf8\x59\xeb\xf7\xc2\x5f\xfc\xd2\x9a\xb4\x1e\xed\x49\xfb\x91\x27\xca\x8b\x32\xa5\x3c\x29\x6b\x17\x35\xf3\xd3\xcc\x15\xdc\xd9\xde\xa2\xb9\xbf\x8b\xa2\x38\x63\xef\xf9\xe5\x5d\x2c\xbe\x5a\x12\xa7\xe9\x2c\xdc\x2c\x0e\x9d\xf1\x0a\x80\xab\x4e\xfd\xb1\xe2\x6d\x54\x81\x36\x6c\xe1\x47\x51\xf5\xbf\x26\x9a\x95\x9a\x26\x5a\x33\xdc\x35\x00\x67\x4d\x52\x13\xd8\x19\x17\x0d\xdf\x9e\xe1\x29\xdb\x65\x67\x7d\x7b\x96\x65\xd3\x5a\x33\xe7\x58\xe1\x9e\xae\xad\x01\xe0\xba\x53\x9b\x55\xa2\x5c\x3e\xcf\x91\xf4\x63\xad\xd3\xbd\x54\xaa\xcb\x1c\xad\x4b\x4d\x6e\x07\xbd\xa7\x52\xe9\x74\x98\xa1\xd7\x4f\x13\x99\x69\x89\x48\xc9\x7e\x24\x1f\xf5\xf6\x54\x3c\x90\x18\xc4\x69\x16\x25\x88\x74\xae\xf2\xf8\x21\x22\xfd\x62\x60\x7a\x35\xdc\x8d\xf3\x98\xe8\xf5\x68\x7d\x63\x6e\xb4\xff\x84\x7b\xd6\xbf\x87\x90\x49\xed\xf1\xfe\x37\x2f\xb8\x2d\x78\x7c\xb7\x66\x3f\xff\xe6\x82\x39\xfa\x43\x8f\x5f\xf4\xea\x76\x8d\xfe\x98\x7b\xff\x1d\xfa\xfa\x84\xf5\x57\x3c\xfe\x2d\x1f\xf4\xbe\xc7\x97\xdf\x05\xf7\x1b\xee\x1b\x70\xf0\x95\x27\xf8\xe7\xf5\xf3\xbb\x54\xa3\xff\x5e\xa3\xf7\xeb\x9b\xce\x9b\x74\x71\xc2\xfa\x6d\x8f\xf7\xcf\x7f\x03\xc0\x29\x54\x80\x0d\x85\x5c\x76\x58\x6b\xf5\x36\x87\x07\x15\x7b\x13\xba\x4c\x7e\xe6\x5a\xb0\x77\xab\xb7\xbf\x23\x7f\x02\x00\x00\xff\xff\x0b\xe2\x7b\xec\x58\x06\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1624,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1640913018, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
