// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x4a\x33\x41\x14\x3d\x93\xe4\xcb\xdf\x27\x12\x85\x80\xac\x16\x01\x2d\x65\x35\x16\x16\x56\xb1\x50\x11\x52\xa8\x2f\xb0\xac\x9b\x09\x2e\x26\x1b\xd9\x5d\xe2\x4f\x04\x6d\xec\x6d\xec\xf5\x0d\xec\x52\xea\x4b\xd8\x59\xa4\xb4\x54\x10\xec\x1c\x99\x71\x26\x59\x66\xb3\x98\x03\x9b\x3b\xe7\xcc\xde\xb9\xf7\xdc\xd9\x5c\x6d\xd5\xb7\x53\x84\x40\x81\xe0\x0b\x23\x36\xc2\x5c\x6a\xb4\xae\xc9\xdf\x22\x08\xfa\x04\xe8\xd2\x46\xd1\x31\xde\x99\x78\x8f\x00\x34\xac\xf8\x7c\x4d\x1d\xea\xf6\x8c\xb7\xa1\xee\xd1\xd3\x0a\x5f\x9f\xd8\xce\x71\xcf\x18\x08\xbd\x2f\x8b\x05\xc6\xa7\xe0\x4f\x0f\xbf\x3c\x47\x80\x01\x63\xac\x9f\x02\xca\x00\x6e\x00\x64\xf9\xfb\xb2\x87\x3b\x19\xf9\x99\xfc\x3c\x5e\x93\xd7\xe3\xbd\x60\x67\xaf\xce\xf7\xbe\x19\x63\x25\xe5\xeb\xe2\x00\xf9\xcb\xff\x64\x8a\xf7\x22\x1f\x85\xeb\x31\x7e\x75\x6c\x00\xc8\xe0\x83\x8d\xdb\x4b\x23\x1d\xd3\x16\x01\xcc\xe0\xdf\x90\x67\x64\x34\x84\x9e\x8d\xe9\xd3\x00\x66\x23\xe7\xa8\x9e\x16\x54\xff\x00\xc4\x15\x98\x21\x3d\x0b\x11\x74\xb8\xe5\x15\x1e\xac\xa6\xdb\x0a\xa9\x0f\xab\x4b\xfd\xc0\xed\x78\xb0\x5a\xae\x43\xbd\x80\xc2\xf4\x69\xcb\xa4\x47\x56\xd3\xb7\xdb\x14\x6d\xdb\xf5\x4c\x07\x66\x10\xfa\xa1\x7d\x08\x33\x38\x6f\x8b\xe8\x77\x1a\x76\x68\x73\xb9\x6a\x56\xd7\x27\x18\xc5\x44\xd8\x14\x73\x89\xe3\x51\xde\xb7\xad\xe9\xfa\x37\x47\xe4\x93\xd5\xf4\x5a\x42\xbd\x8c\xc6\x73\x7f\xe4\xeb\x77\x9e\xd7\xf8\xbe\xcc\x5f\xd3\xf4\x67\x19\xcb\x9a\x5e\xd2\x7c\x2c\xc9\xb5\x3e\x83\x97\x84\x7e\x75\xff\xf3\x09\xf9\xaf\x09\xf9\x3a\x5f\x8d\x7e\x33\x11\x0c\x22\xfb\x51\xe8\xfe\x97\x01\x14\x10\xc7\xbd\x6c\x54\xf9\x2d\xc8\x59\xab\x7c\xa5\xef\x8e\xa9\x2d\xf6\x65\xfe\xad\xe4\xca\xa3\xca\x57\xff\xcb\x9f\x00\x00\x00\xff\xff\x90\xe6\x4e\xec\x98\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1176,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878412, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
