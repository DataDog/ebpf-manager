// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\xce\xd3\x30\x14\x3d\x6e\x4b\xbf\xef\x2b\x0c\x85\x01\x41\xd4\x21\x02\xa9\x0b\x52\x4a\x19\x90\xd8\xba\xf0\x33\x74\x88\x78\x81\x90\xa6\xa6\x54\x6d\x93\xca\x49\xf9\x0b\x12\x13\x3b\x0b\x0f\xc0\x1b\xb0\x75\xe4\x15\x3a\x32\x76\x64\x2c\x12\x12\x1b\x46\xd7\xb5\xd3\xca\x49\x81\x23\x39\xbe\xf7\x24\xc7\x3e\xf7\xda\x79\xff\x70\xf8\xa8\xc6\x18\x0c\x18\x7e\xe1\x90\x1d\xe0\xd7\x0e\xf1\x40\x3f\x5b\x60\x58\x33\xa0\x05\x60\xe6\xfc\x94\xc4\x52\x2e\x78\x9a\x46\xce\x4e\xe5\x37\x18\x30\x11\xc9\x8a\xe2\xa5\xcb\x27\xb9\xf3\xbd\xe0\x05\x1f\xbb\x14\x27\xb1\x1b\xe5\xce\xb6\xe0\x79\xe6\x46\x14\x87\xcb\x6c\x95\x3b\xdf\x0a\x3e\xe6\xaf\xd4\xf7\xcb\x30\x9a\xe5\xce\x46\xf1\x5f\x3f\xef\x3d\x9d\x31\x60\x23\xa5\x5c\xd7\x80\x2e\x80\x0f\x00\x9a\xe4\x47\xd5\x04\x7c\xd2\xde\x69\x0d\xd2\xd3\x1e\xb4\x3e\x79\xa0\xfd\xc9\x23\xf9\x23\xef\x2d\x3c\xf6\x87\x00\x7e\x4b\x29\xdb\xa6\x2f\x6f\x9f\xe2\xfc\xdd\x65\x76\x85\xbc\xe8\x61\xf0\xa5\xa2\x5f\x36\x1e\x00\x68\xe0\x87\xac\x7a\x57\x47\xbd\xc4\xdd\x02\x70\x15\x97\x8a\xbc\xa1\xe7\x9b\x8a\x6f\x96\xf8\x6b\x6a\xd4\x4b\x9e\x3a\xc6\x3f\x00\x75\x84\x5e\xc6\x5f\x67\xd8\xd7\x1b\xa4\xb3\x51\x6f\x5f\x33\x82\x97\x5c\xa4\xd3\x24\x46\x30\x9f\x46\x3c\x4e\x39\x3c\xc1\xe7\x1e\x7f\x11\x3c\x17\xe1\x82\x63\x11\x4e\x63\x2f\x82\x97\x66\x22\x0b\x47\xf0\xd2\x37\x0b\x35\x8b\x64\x1c\x66\x21\xd1\x7d\xaf\x7f\xff\x3f\x3a\xf1\x77\x0c\x54\x3f\xca\xd8\xe9\x4b\xf9\xcc\xe2\xed\xbb\xca\xf4\x68\x56\xac\x5b\x85\x86\x95\x9f\xfd\x43\x6f\x9f\xf5\xb9\x95\xfb\x5a\x7f\xcf\xf6\xaf\xe7\xae\xc5\xb7\xad\x3a\x6e\xeb\xd8\xee\xc1\x75\x56\xed\xd7\xae\xdf\x39\xa1\xef\x9c\xd0\xdb\x79\xef\xf8\xae\x1c\xc1\xd5\xfa\xbb\x16\x6f\xd7\x7f\x07\xc0\x05\xca\xd8\x6a\xbd\xa9\xf7\x42\xf7\xda\xe8\x0d\xff\xa4\x62\x6f\x82\xaf\xf5\x1f\x75\x6e\x6a\x34\x7a\xf3\x3f\xfe\x09\x00\x00\xff\xff\x96\x8a\xa0\x4e\xd0\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1232,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629878383, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
