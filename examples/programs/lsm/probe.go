// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x53\xbf\x92\xd2\x40\x1c\xfe\x36\x64\x00\x83\x85\x52\x31\x0c\x8d\xa5\x16\x41\x2c\xa8\x69\xd0\x42\x0a\x87\xd2\x26\x86\xb8\x0c\x19\x09\x30\x49\x74\x40\x9c\xb1\xf2\x11\x7c\x00\x3b\xdf\x00\x3b\x5f\xc3\x92\x92\xd2\xbb\xe6\xae\xba\xbd\xd9\xe4\xb7\x90\xd9\x24\x77\x3c\xc0\x7d\x33\xe1\xb7\xfb\x91\x6f\xbf\xfd\xfd\xc9\xf7\xe1\xe8\xb5\xc1\x18\x14\x18\xae\x70\xda\x9d\xf0\xa1\x72\x5a\x0f\xe8\xb7\x01\x86\x1d\x03\x2c\x00\x9f\xda\xff\x85\x64\x5b\x0c\x08\xfd\x78\x23\xd7\xce\x64\x35\xdd\xb6\x0f\x47\x7e\x1e\x05\x8e\x5c\x47\xdc\xfb\xbc\x6d\xef\x13\xfe\xef\xaf\xf4\xcc\x1a\x03\xf6\x42\x88\x9d\x01\x34\x01\xfc\x00\x50\x95\x3a\x00\x42\x08\xa1\xbc\x7f\x52\x34\x00\x98\xf4\x58\x05\xf7\x7d\x40\x0a\x59\x73\x59\x6f\xd9\x13\xd9\x0f\x0b\x6f\xde\x8d\x00\xdc\x50\x4d\x9f\xd0\x7b\xec\xeb\x18\xf5\x6f\x0d\xf6\x98\x6a\xde\xca\x9c\xb1\x3e\xc3\xe7\x6d\xd2\x8b\x0b\x51\xf4\x5f\x05\x95\x1c\xf7\x1c\xc0\xd3\xa4\xc3\x29\x4c\x8a\xb5\x84\xaf\xe5\xf8\x61\xc2\x9b\x47\xbe\x43\x43\x2a\xef\xdf\xcc\x9c\xaf\xee\xda\x51\x79\xd1\xac\xc0\x8e\xf9\x3a\x86\xf3\x85\x87\x91\xbf\x5c\xe4\xea\x22\x89\xae\x8c\xce\xdc\xf7\xf8\x22\xe2\xb0\x43\x3e\xb7\xf9\xcc\x99\x86\x6e\xc0\x11\xb8\xab\xa8\xeb\xb9\xde\x4c\x2e\xfd\x85\xed\xc1\x8e\xe2\x30\x76\x27\xb0\xa3\x4d\x90\xc4\x70\xf9\xd1\x8d\x5d\x49\xf7\xec\x5e\xff\x8c\x9a\x9d\x83\x71\x52\xbf\x3c\x0e\x46\x1a\x43\x8d\xd7\xbf\x5d\x46\x4f\x55\xe3\x07\x25\x7e\xa6\xb6\x7f\x76\x8f\x5e\x9f\x8d\x7a\xc1\x7b\xac\x20\x87\x3f\x14\x3b\xec\x6e\xff\x09\xe9\x5f\x69\xfc\x9e\x74\x4d\x8d\x3f\xce\x33\xc5\x17\x25\xfe\x97\xac\xd8\x4f\xaf\x5f\xbd\x44\x7f\x5d\xa2\xd7\xf7\xfd\xec\x0c\x66\x41\xc4\xcb\x02\xbf\x2c\x64\xde\x8f\x74\x2d\x80\x7f\xa4\x57\xf9\x5a\xa4\x55\x7a\xc5\xbf\x2f\xf2\x96\xbe\x44\xfe\xa6\xbd\xca\x51\xe9\xd5\xf7\x7f\x1b\x00\x00\xff\xff\x11\x72\xbd\x1e\x20\x06\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1568,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629973493, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
