// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x3d\x6c\xd3\x40\x14\x7e\x57\x97\xb6\xa4\x1d\x52\x58\x82\x95\x21\x42\xaa\x54\x18\x5c\x8a\x0a\x42\x95\x90\xba\xf0\x33\x54\xa8\x62\x80\xd1\x38\xce\x95\x44\x8a\x93\xc8\x3e\x50\x82\x91\x9a\x05\xd1\x0d\x24\x84\xd4\x0d\x58\x50\xc7\x6e\xb0\x85\x91\x91\xb1\x63\xc6\x8e\x65\xa2\x13\x87\xde\xf9\xb9\xbe\x5c\x62\xe8\xce\x93\xd2\xcf\xf7\xdd\xbd\xbb\xef\xde\xf7\x6a\xef\xdc\xd9\xbc\x3b\xc5\x18\xa4\xc1\xe0\x17\x64\xa3\x2c\xee\x9f\xcb\x9e\x37\xe8\xef\x02\x30\xe8\x2d\x26\xdc\x97\xa9\x04\xe3\xab\x27\x32\xc1\x63\xc2\x23\xc2\x21\xe1\x21\xe1\x0f\xc2\xef\x84\xdf\x08\xbf\x12\x1e\x10\xee\x13\x7e\x24\xdc\x23\x7c\x4b\xb8\x4b\xd8\x57\x38\xf8\x9c\xe8\x98\x9d\x01\xe8\x4b\x29\x07\x55\xd2\x67\x01\xf4\x01\xe0\x15\x00\xbc\x03\x80\x12\x03\xf0\x44\x7d\x1d\xe7\x96\xa2\x02\xc4\x76\x57\xe5\x23\x1f\x72\x91\xf0\xb5\x4a\x27\xb6\x3b\xc9\xbe\x9f\x68\x5f\x06\xd0\x91\x52\xe2\x7d\x8b\xc8\x5b\x09\x3f\xa8\x25\x88\xfb\xcf\xe0\x79\x54\xab\xf7\x84\xbd\x8b\xa4\x83\x8a\x1b\xd9\x27\xa7\xe7\x55\xfc\x40\x65\xaf\x2f\xd5\x0a\xb1\x7d\x9c\xe9\x68\x88\x1e\x3e\xbb\xd5\xce\x76\x6c\x1f\x9d\xf2\xcd\x28\x70\xd5\x1e\xdc\x7f\x16\xdb\xc3\x31\x7d\x43\xd2\x77\x49\xd3\x53\x02\x00\x29\xa5\x04\x43\x17\xda\x36\x4d\xbf\xc2\x04\xdf\xff\xe7\xb8\xb7\xb5\x09\xbf\xb5\x9a\x61\x60\x6f\x60\x5f\x60\xef\x60\xdf\xa0\x17\xe8\x03\x7a\x85\x3e\xa1\x97\xe8\x63\xba\xbe\x48\xc8\x5e\x3c\x84\xb9\x97\xf3\x6c\x81\xbc\x28\x69\x7b\x2e\x6b\xff\x70\x65\x00\x58\xd3\xe6\xf6\xce\xa8\xb5\xab\x3c\xfc\x29\x27\xcd\x59\x60\x4d\xcc\xb1\x94\xeb\xa3\xf1\x08\x00\x16\x55\xc7\x24\x91\xae\x58\x53\xfc\xec\x18\x1f\x2a\x3e\x7b\x39\x94\xe9\x2e\xb7\x01\xe0\x82\xb6\x7f\x7a\x8f\x59\xc5\x67\x7a\xd2\xbb\x97\x69\xcc\xa8\x27\x6f\x69\x63\xb5\xda\x11\xbc\x2b\x46\xcb\xdd\x68\xb5\x6b\xdc\x7d\xca\x85\x27\x44\x88\x53\x2b\xa3\x8c\xfb\x9c\x87\x51\xa3\xdd\x1a\x33\x49\xad\x45\x74\x9b\x0d\x9f\xb7\x22\x0e\x4e\xc8\x9b\x0e\xaf\xbb\xdb\xa1\x17\x70\x08\xbc\x4e\xb4\xe2\x7b\x7e\x1d\x1f\x1b\x2d\xc7\x07\x27\x12\xa1\xf0\xaa\xe0\x44\xbd\x40\x61\xd8\xae\x79\xc2\x43\x7a\xd5\x59\xbd\x99\x6b\xcb\x99\x63\x27\xbd\xa7\x11\xfb\x54\xc2\x0f\x06\x6f\xbe\xa3\x19\xfd\x66\x0c\x7e\x23\xe7\x3c\xd3\xf9\xcb\xff\xc8\x5f\x36\x0e\x9c\x33\xd6\x3d\xc8\xc9\xaf\x53\x9e\xd9\xc7\x66\x7e\xa0\x7b\xad\x07\x7d\x57\xca\xec\xef\xfa\x1f\xe7\xe4\x97\xad\xc9\xeb\xcd\xfa\xdd\xc8\xc9\xaf\xe4\xe4\x9b\xe3\x37\x94\x7f\xdd\xe0\xaf\x51\xfe\x15\x83\x2f\x1a\x3a\x7c\xad\xf7\xf5\x78\x42\xf9\x5b\x06\x6f\xd6\x0f\x3f\x08\xe7\x61\x3c\x76\x49\x68\x85\xc6\xf3\xb4\x6e\xce\xd0\xf1\x7a\xc2\xd9\x18\x07\x74\xfe\xa1\xa6\x77\x5a\xcb\x4f\xdf\x63\x7f\x02\x00\x00\xff\xff\xf6\x62\x43\xd1\x48\x08\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2120,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1642951050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
