// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x31\x6f\xd3\x40\x14\xc7\xff\x67\x9b\xd4\xa4\x0c\x05\x96\x62\x65\x28\x03\x03\x0c\x2e\x65\xe8\xc0\xd4\xa5\x30\xd0\xa1\xea\xc8\x62\x39\xce\x55\xb5\x14\xa7\x95\x6d\x10\x21\x48\xb0\xf0\x11\x90\x58\xd9\xf8\x06\x1d\xf9\x1a\x8c\x19\x19\x41\x42\x22\x13\x87\x9e\xfd\x6c\x1f\x67\x1b\xb2\xf7\x49\xce\xbb\xfb\xe5\xfe\xf7\xde\xbd\x77\xf6\xdb\xc3\xa3\x27\x96\x10\xa8\x4c\xe0\x17\x9a\x59\x63\xef\xec\x66\x7c\xc0\xbf\x9b\x10\x98\xdf\x2e\xd9\x25\x8b\x32\x6f\xa5\xc8\x6f\x0b\x60\x27\x4a\x26\x34\x7e\x7c\x6f\x32\x5c\x78\xdf\x6b\x9e\xc6\xf9\x9c\xc6\xc1\xf8\xe2\x74\xe1\x7d\xab\xf9\x34\x4b\x82\x62\x0f\x19\xbd\x58\x78\xcb\x82\x7f\xf9\x54\xee\xbb\x21\x80\xa5\x52\xea\xd2\x02\xee\x00\x78\x0f\x60\x40\x3a\x00\x4a\x29\x55\xe5\xf6\x81\xbd\x05\xc0\xe1\x67\xd8\x71\x9e\xab\x6c\x4f\x8f\x8f\xf0\x9b\x6b\x46\x35\xa7\x7a\x53\x4f\xa8\x1f\xd4\x33\xea\x57\xb5\x76\x8b\xbd\x78\x7d\x02\xf7\xcd\xa6\xb8\xc1\x35\xdf\xd6\xf6\xfb\xb8\x46\xcc\x67\x45\x2f\x7e\xa8\xae\xff\x6c\xd8\x2d\x76\x1f\xc0\x4d\x5c\xab\xe7\x0e\xfb\x8d\x82\x0f\x5a\xfc\xb0\xe0\x4e\xcd\x47\xa2\xc9\xff\x96\xb6\x7f\x95\xeb\xa8\x3a\x17\xdf\x15\xf8\xb9\x7c\x95\x23\x78\x29\xd3\x2c\x3e\x9f\xb5\xea\x42\x60\x97\x7c\x30\x8d\x23\x39\xcb\x24\xfc\x54\x4e\x7d\x79\x16\x9c\xa6\x61\x22\x91\x84\x17\xd9\x6e\x14\x46\x67\x34\x8c\x67\x7e\x04\x3f\xcb\xd3\x3c\x1c\xc3\xcf\xe6\x49\xe1\xd3\xf3\x49\x98\x87\x84\xf7\xfc\xbd\xfd\x35\x6a\xb6\x8e\x9d\x14\xf5\x6b\x9b\xcb\x30\x35\xb8\xf9\x6e\x0b\x7e\x06\x06\x3f\xe8\x89\xe7\x18\xf3\xbb\xff\xd1\x9b\x77\xc3\xed\x58\x27\x3a\xce\xf0\x95\xfd\x48\xfc\x3b\xfe\x83\x1e\xfd\x4f\xd1\xbd\xde\x3c\xbf\xdb\xa3\x5f\xf5\xe8\xcd\xf9\x98\xf5\x8f\x0c\x5e\x5e\xaa\xf2\x5b\xa5\xdb\x96\x91\xc7\xbe\x7e\x07\x35\xdb\x61\xf0\xb0\x23\x5f\xdd\x28\xee\x75\x33\x36\xe5\x6f\xfd\x1d\x6f\xc8\x5a\xd7\xc8\xe3\x79\x47\x6c\xb2\x63\x86\x9f\xb5\x7c\x6d\x4d\x5f\xbd\xff\x7f\x02\x00\x00\xff\xff\x0d\x5c\xde\xa3\x40\x06\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1600,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1642949460, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
