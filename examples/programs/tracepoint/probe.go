// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x31\x6f\xd3\x40\x14\xfe\x2e\x8e\x9a\xd2\x32\x00\x13\x8a\x3a\x64\x84\xc5\xa8\xa8\x42\x0c\x0c\x5d\x68\x97\x4a\x54\x4c\x1d\x90\xac\xc3\xbd\x0a\x8b\xd8\x41\xf6\x81\x30\x01\x31\x21\x31\x80\xc4\x82\xc4\xca\xc6\x3f\xc8\x08\x63\x7f\x46\xc7\x8e\x30\xc1\x84\xd1\x3b\xbf\x8b\x8f\x73\x4c\x43\x3f\xc9\xb9\x7b\xdf\xdd\xe7\xf7\xbd\x77\xe7\xbc\xbe\xbb\xb7\xd3\x13\x02\x16\x02\x3f\xd1\x44\x0d\x0e\x82\x66\xbe\xcd\xbf\xeb\x10\x98\x09\x40\x5f\x5f\x43\x3c\xfc\x55\x11\x7b\x55\x00\xb9\x8c\x15\xcd\x9f\x4c\x92\x6c\x3a\xfc\x3e\xe7\x55\xa6\x0d\x9f\x8f\xae\xe9\xe9\xf0\x74\xce\xa7\x8f\x0f\x13\xc3\x4b\x3d\x9a\x0e\x4f\x0c\xff\xf5\x73\x9d\x6b\x20\x80\x93\xaa\xaa\x66\x3d\x60\x03\xc0\x1b\x00\x2b\x00\x66\xec\xe5\x23\x8f\xff\xe3\x83\x62\x9a\x6b\xdf\x47\x19\xe9\xda\x47\xac\xce\xeb\x83\x6a\xa1\x3a\xa8\x56\xaa\x93\xde\x45\xf9\xc8\x9b\x59\x2f\xa3\x86\xf3\xd6\x77\xf7\xf7\xf0\xbb\xaa\x4c\xde\x4b\xf6\x3c\x5e\xdc\xc7\xea\xcb\x75\x71\x91\x3c\xf2\x63\xf1\xd6\x99\x93\xa7\xad\x8e\xb5\x7f\xe1\x08\x40\x1f\x3f\xaa\x45\x6b\x01\x82\x85\x9a\x00\xfd\x16\x77\x0f\xc0\x65\xd3\x91\x1a\x76\xc7\x8e\xe1\x07\x2d\xfe\x8a\x79\xfa\x2d\xbf\x5b\x86\x0f\x5a\xfc\x06\x8f\x74\x37\x7b\x00\x6e\x3b\xb1\xd9\x1d\x6a\xf5\x5c\xa3\xe9\xe7\x8d\xbf\x3a\xed\x2e\x14\x65\x11\xcb\xf1\xb8\xa0\x49\x64\xce\x29\xe2\x53\x43\xf4\x4c\xe5\x45\x32\xc9\x10\x8d\x93\x58\x65\x85\x42\x98\xab\x71\xa8\x1e\x45\x47\xb9\x4c\x15\x52\x99\x64\x61\x8c\xb0\xd0\xb9\x96\x0f\x11\x16\x65\x6a\xc6\x7c\x72\x28\xb5\x24\x7a\x33\xdc\xbc\x75\x66\xd3\x97\x40\x6a\xeb\xf2\x70\xdc\xab\xc7\xf7\x1e\xef\x7f\xb3\x82\x9f\x15\x8f\xdf\xee\xc8\xe7\x9f\xe8\xe8\x0c\xbd\x7f\xbf\x56\xbd\x78\xd0\xa1\x3f\x5e\x52\xff\x8a\xf5\x37\x3d\x7e\x9f\x0b\xbd\xe3\xf1\xf3\xef\xc5\xee\x73\xef\x86\x83\x77\xbc\xc1\xaf\xd7\xef\xdf\x6e\x87\xfe\x43\x87\xde\x8f\x1f\x38\x77\xd5\xc5\x27\xd1\xf8\x73\xe1\xd7\x7f\x00\xe0\x02\xda\xf8\xc2\x2f\x1c\x71\xbc\xc6\x5a\xab\xb7\x7d\x78\xba\x20\x37\xe1\x94\xf3\x7f\xe3\x58\xb0\x77\xab\xb7\xff\x2f\x7f\x02\x00\x00\xff\xff\xd9\xbd\x75\xb6\x18\x06\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1560,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1642024490, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
