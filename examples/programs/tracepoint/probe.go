// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xbf\xae\x12\x41\x14\xc6\xbf\x01\xe4\x9f\x16\x68\x65\x56\x0a\x4a\x2c\x1c\xc5\x02\x4b\x49\x8c\xda\x60\x62\x8c\xa5\xc9\x66\x5c\xc6\xb8\x71\x77\x31\xbb\x13\x23\x62\x62\x65\x62\x69\xe3\x03\xf8\x14\xd8\xd9\x5a\xfa\x08\x94\x16\x16\xdc\xea\x52\xdd\xbd\x99\xb9\x33\xb0\x39\xcb\x86\xfb\x25\xc3\xcc\xf9\x91\x33\xe7\x3b\x87\xe1\xcb\xe3\xe9\x93\x1a\x63\x70\x62\x38\xc5\x3e\xda\x6b\x52\x2b\x9c\xed\x67\x17\x0c\x2b\x06\xa8\xdb\x5d\x04\xde\x36\xd7\xf4\x26\x03\x52\x11\x48\x7d\x7e\x3f\x0f\x93\xa5\xb7\xd9\x71\x99\x28\xc3\xd3\xc1\x50\x2d\xbd\x7f\x3b\x1e\xbf\x9b\x85\x86\x0b\x35\x58\x7a\x6b\xc3\x7f\xff\xbc\xa8\xd5\x62\xc0\x3a\xcf\xf3\x55\x0d\xe8\x03\xf8\x0a\xa0\x09\x60\x65\xbd\xfc\x20\x3e\xf5\x5d\xfa\x1e\x5d\x4b\xd7\xd1\x5e\xb4\x0f\xed\xf1\xe9\xf3\x29\xce\xf2\xdc\xdc\xdf\x73\xfd\x7e\x7a\x81\xf6\xe7\xab\xec\x9a\xf6\x62\x97\xd3\xb7\x03\x73\xa0\x7a\x06\xa0\x81\x93\xfc\xd0\x77\x75\xd4\x4b\x6c\x0c\xe0\x3a\xae\xec\xe2\x86\xdd\xef\x18\xde\x2c\xf1\x5b\x00\x6e\x14\xee\x71\x9e\xfa\xce\x3f\x00\xf3\xd3\x70\x25\x3f\x2a\xec\xfb\xbd\x9b\x2d\xb2\x40\x44\x51\xa6\x0f\xbe\x19\x87\x6f\x87\x03\xff\x83\x4c\xb3\x70\x9e\xc0\x8f\xc2\x40\x26\x99\x04\x4f\x65\xc4\xe5\x5b\xff\x4d\x2a\x62\x89\x58\x84\x09\x0f\xc0\x33\x95\x2a\xf1\x1a\x3c\x5b\xc4\x66\x4f\xe7\x33\xa1\x84\xc6\x23\x3e\x1a\x5f\x62\x3a\xc7\xf5\xd2\xcc\xa9\xac\x3f\xf6\x11\x2a\xc2\xe9\xdb\x64\x76\x35\x09\x9f\x54\xd4\x6b\x90\xb8\x75\x24\x9f\xbe\x81\x36\x89\x67\x36\xff\x3e\xe1\x7f\xed\xde\x27\xbc\x47\xfa\x78\x60\xcf\x74\x06\xff\x2b\xfc\xd2\xfe\x79\x45\xfe\xa6\x22\x9f\xc6\x8f\x8a\x6f\xa8\xa0\xad\xdd\xef\x11\x4e\xfb\x7f\x08\xa0\x83\xb2\x7e\x59\xa3\xae\xdf\x8e\x9d\xb5\xcb\x77\xfc\xd5\x81\xda\x5a\x43\x9b\xff\xdd\xc6\xae\x47\x97\xef\xfe\xa7\xe7\x01\x00\x00\xff\xff\xbc\x18\x42\x2a\xc0\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1216,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629886067, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
