// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xb1\x6f\xd3\x40\x14\xc6\xbf\x4b\x42\x92\x06\x84\x02\x03\x42\x16\x83\x97\x48\x74\x31\x94\x01\xa1\x66\xa9\x84\xa0\x4b\x07\x60\x62\x33\xc6\xbe\x52\xab\x8e\x6d\xd9\x4e\x69\x30\x12\x2c\x48\x8c\x2c\x48\xac\x6c\xfc\x07\x1d\x18\x92\xb1\x23\x23\x23\x23\x23\x4c\x44\x0c\x18\x3d\xfb\xce\xb6\x2e\x8e\xf2\x49\x8e\xdf\xfb\xd9\xef\xee\xbd\xcf\x97\x37\x0f\x0e\x1e\xb6\x18\x83\x14\xc3\x1f\x54\x59\xa5\x61\xbb\x8a\xf7\xc4\xef\x00\x0c\xf3\x6b\x05\x3b\x63\xc0\xf6\x00\x38\xd6\x96\x19\xe5\xd7\x19\x10\xb9\x81\x43\xf1\xae\x3e\x72\x52\xed\x57\xc9\xad\x49\xe8\x51\xcc\xcd\x90\xa7\xda\xcf\x92\x87\x53\x7d\x44\xb1\xa3\xdf\x8c\x53\xed\x47\xc9\x5d\xff\x85\x4e\x71\xe0\xeb\x76\xaa\x7d\x2f\x79\xe2\xcd\x72\x1e\x4d\x7d\x3f\xd5\xbe\x95\x3c\xd6\xed\x69\xce\x23\xee\xa7\xda\x79\xb5\xbe\xeb\xe4\xef\x8f\x1c\xdd\x4d\xb5\x45\x26\xfb\x26\xc5\xda\xdf\x3c\x7f\x07\xe0\x32\x80\x79\xaf\xe0\x94\xf7\x01\xcc\xf8\x97\x3c\x7f\xd9\x03\x68\x91\xf9\xe7\xe2\x79\x8f\x01\x8b\x2c\xcb\xce\x5a\xc0\x98\x78\x5c\xf0\x79\xa7\xaa\xef\xd2\x3e\xc2\xbb\x8f\x8a\xaf\xd4\x13\xf5\x43\x3d\x53\xbf\x34\x13\xcd\x43\x33\xd3\xbc\xe4\x09\xf9\x41\x9e\x91\x5f\xe4\x29\xf9\xb9\x3d\xc0\xfe\xa3\x03\xe0\x5f\x96\xe5\x7d\x0f\xe5\xf7\x7b\xf5\x04\xfd\xd7\x17\xd9\x25\x9a\x59\x5c\x52\xf7\x9a\x3e\xac\xa2\xc7\x00\x3a\xf8\x9d\x35\x3d\x6b\xa3\xbd\xc2\x76\x01\x5c\xc1\x85\x32\x17\x63\xa3\x97\xf3\xee\x0a\xa7\x3e\xaf\xd6\xd6\x91\x3d\xdd\x90\xfd\x03\x68\x51\x60\x24\xfc\x34\x81\x79\xc2\xa3\xd8\x0d\x7c\x84\x3c\x3a\x34\xf9\x09\xf7\x13\xd3\x0e\xa7\xa6\xed\x05\xf6\x71\x0d\xde\xaa\xa0\xe9\xb9\x36\xf7\x63\x0e\x23\xe2\x9e\xc1\x8f\xcc\xc3\xc8\x9a\x70\x4c\x2c\xd7\x37\x6c\x18\x71\x12\x25\xd6\x73\x18\xf1\x6c\x92\xdf\xa3\xc0\xb1\x12\x8b\xf0\x8e\xb1\x73\x77\xb3\x41\x1b\xf4\x34\xf7\x69\x55\x9f\x5a\xc5\xfd\x54\xe1\xea\x27\x61\xe2\xea\x2a\x7c\x6f\xcd\x7e\x1d\x25\x1f\x6d\xa8\x57\xcf\x40\x5f\x79\xef\x48\xd4\xdf\x51\xf8\x5b\x51\x37\x56\xf8\x50\x99\x63\x2c\x62\xd5\x83\xaf\xac\xb9\x5f\x75\xfe\xfe\x9a\xfa\xc5\x9a\x7a\x35\xdf\xaf\x9f\xa1\x9a\xce\x45\xfd\xed\x86\xfd\xea\xba\x0f\x60\x0b\xab\x7a\x2f\x16\x94\xf3\x6e\x89\x33\x2e\xeb\x25\x7f\xd6\xb0\x37\x69\x29\xf6\xff\x20\x72\x39\xa3\xac\x97\xff\xd3\xff\x01\x00\x00\xff\xff\x37\x07\x25\x79\x90\x05\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1424,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1637854469, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
