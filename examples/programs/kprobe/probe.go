// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x3f\x6c\xd3\x4e\x14\xfe\xdc\xfc\xda\xe6\x97\x02\x05\xa6\x62\x65\xf0\x82\xd4\x0a\xc9\x6d\x11\x42\x0c\x0c\x5d\x0a\x4b\x91\x10\xea\xd0\x2d\xb8\xae\xab\x58\x89\xe3\xc8\xbe\x96\x96\x20\x01\x03\x03\x03\x23\x62\x61\x81\x8d\x0d\xa6\xc0\xc4\xcc\xd6\xb1\x63\x46\xc6\x22\x21\xc1\x80\x6a\xf4\x9c\x77\xf1\xe5\x6c\xd3\x32\xf3\x24\xe7\xde\xfb\xee\xbe\x7b\x7f\xed\x3c\x5e\x5d\xbb\x35\x61\x18\x90\x62\xe0\x07\x32\x2b\x93\xc1\x64\xa6\xaf\xf0\xef\x39\x18\x98\x33\x80\x6e\xe8\x77\x08\x11\x0b\x35\xf4\xcc\xa3\x84\x74\xc2\xb7\x63\xab\x49\x7a\x18\xb6\xac\x9e\xf9\x75\x84\x07\xad\x2d\x9f\xf4\xc8\x9a\xdf\xed\x99\x83\x14\xff\xfc\x66\x78\xf7\xb4\x01\x0c\x92\x24\xe9\x4f\x00\x73\x00\x9e\x01\x98\x02\xd0\x67\xdf\x2f\x79\xed\x1b\x40\xa7\x06\xb4\xcc\x5f\x89\xb4\xc3\x20\x08\x5d\xf3\xe7\xc8\xcf\x8e\xf0\x03\xd2\xbd\xb8\xe1\xca\xb8\xfa\x9c\x5c\x6c\x1e\xe7\xfc\x1e\xb1\xdf\xd9\x93\xfc\x8a\x85\x9a\xab\xe4\xd9\x0c\xc3\x16\xe9\x56\x37\xf4\xd5\x3c\xe3\xfd\xd8\x25\xdd\x69\xb7\x2d\x99\x27\xe1\x91\x27\x76\xd2\xfc\x3b\xd6\x7c\xcf\x3c\xcc\xd7\xc5\x11\x56\xcf\x3c\xd0\xe2\xfd\x9e\x8b\xf7\x80\xe3\xbd\xfc\x87\x78\x89\xfe\x1f\x3f\xb5\x82\xbe\xfe\xeb\x42\x35\xa7\x39\xa4\x59\xa5\x39\xa5\x59\xa6\x39\x1e\xdb\x77\x84\x45\x3d\xa3\x7e\x51\x4f\xa9\x9f\x63\x87\x69\xd0\x68\xc8\x68\x00\x3b\x35\xdc\xbe\xbb\x86\xe3\x24\x49\xfb\x75\x9e\xef\x31\x1e\xde\x43\xf5\xd1\x8c\x71\x06\xc3\xb9\x9e\x53\x62\xd8\x53\xf4\x3a\x80\x6b\x25\x7b\x72\x7f\x5d\xb1\xdf\x9f\x32\xcf\xb7\xe9\x0c\x7c\x4b\x8a\xf6\x2a\xa8\x14\x72\x2a\xe9\xd4\x14\xe1\x93\x39\xec\x09\x80\x0b\xf8\x7f\x64\x4b\xe6\x83\x14\xaf\xe5\xf0\xd7\x29\x3e\x35\xc2\xeb\x3c\xe7\x77\x00\x5c\x54\xfc\xca\xfc\xaf\xa4\x78\x25\x87\x4f\xa7\x78\x16\x8f\xac\x47\x9d\x57\xba\x76\x02\xc0\x0d\xc5\xa6\x5b\x36\x14\x3b\xf5\x66\x0b\x6f\x4f\xa0\x15\x79\xa2\x1b\x85\x9b\x5e\x83\x1b\x9f\x21\x8b\x23\x64\x78\x60\x77\x3b\x1e\x1e\x62\x60\x51\x07\x1a\x63\x63\x21\x4f\x8d\x83\x8d\x5d\x2f\x8a\x7d\x52\xda\xbe\xeb\x75\x62\x0f\x76\xe4\xb5\x6d\xaf\xd9\xd8\x8e\x9c\xc0\x43\xe0\x74\xe3\x45\xd7\x71\x9b\xa4\xfa\x1d\xdb\x85\x1d\x8b\x48\x38\x9b\xb0\xe3\xfd\x20\x5d\xa3\x70\xcb\x11\x0e\xc1\xcb\xf6\xf2\x75\xcd\x2e\xec\xdf\xdf\xc8\x3b\xae\x97\x2e\x55\x2e\xf9\xa1\x86\xeb\xff\x1d\x06\x3f\x53\x1a\xbe\x52\xe2\x4f\x9f\xb8\x9b\x27\xf0\xf5\xf7\xa3\xaa\xd9\x9b\x25\xfc\x8f\xa7\xe4\x5f\x2a\xe1\x2f\x71\xa2\xfa\xfb\xa7\xf3\x5f\x29\x33\xa7\xca\x80\xf9\x75\xad\x60\x7a\xfe\x9f\x98\x7f\x55\xc3\xe5\x85\xab\x1a\x3c\xfa\xde\xf0\xfa\xa5\x84\xbf\xca\xfc\x59\x0d\x37\xb4\xf5\x69\x49\xfc\xeb\x95\xe2\x78\xf5\xfe\xef\x95\xf0\x37\x4a\xf8\xba\xfd\x42\x79\x87\x55\xb9\xcf\xfc\xae\x86\xeb\xf5\x7f\x0e\x28\x5f\xa5\x4c\x0e\xd9\xd1\x12\xdb\x67\x01\xcc\x28\x7c\x59\xc7\x0f\x05\xbe\x49\x0e\xd8\x7f\x95\x13\xa6\x65\x52\xe1\xcb\xef\xfb\xef\x00\x00\x00\xff\xff\xc7\x94\xd6\x8b\x60\x09\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2400,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629974270, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
