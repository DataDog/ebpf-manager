// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x31\x6f\xd3\x50\x10\xfe\xdc\xd0\x36\x84\x22\x15\x06\x54\xa2\x0c\x5e\x90\x52\x21\xb9\x14\x21\xd4\x81\xa1\x0b\xb0\x14\x09\x21\x06\xb6\xc8\x75\x5f\x15\x2b\xb1\x1d\xd9\x2f\x55\x4b\x0a\x74\x01\x46\x06\xc4\xc8\x00\x13\x1b\x6c\x61\xeb\x4f\xa0\x23\x63\xc7\x8e\x45\x42\xa2\x13\x46\xe7\xdc\x8b\x5f\x5f\xed\x16\x76\x4e\x4a\xde\xdd\x67\x7f\x77\xef\xdd\x7d\xb6\x5f\xdc\x5d\xb9\x37\x61\x59\x50\x66\xe1\x17\xf2\x28\xb7\xa3\xc9\xdc\x5f\xe6\xff\x8b\xb0\x30\x67\x01\xbd\xc8\x0f\x09\x91\xf3\x35\x0c\xea\x87\x29\xf9\x84\xaf\x27\x76\x9b\xfc\x28\xea\xd8\x83\xfa\xc1\x18\x0f\x3a\x6b\x3e\xf9\xb1\xdd\xdc\x18\xd4\xf7\x33\x7c\xf7\xc3\x28\xf7\xb4\x05\xec\xa7\x69\x3a\x9c\x00\xe6\x00\xbc\x04\x30\x05\x60\xc8\xb5\xdf\xf1\x3a\xb4\x80\x1a\x80\x4e\xfd\x67\xaa\x62\xd9\x8f\x43\x4f\xab\x1f\x05\x41\x44\x7e\x68\xc7\x42\xaf\xdf\x97\x7e\x40\xbe\x48\x5a\xde\x69\xf5\xaf\x9c\x51\x3f\x94\xf3\x35\xbd\x5e\x3b\x8a\x3a\xe4\xdb\xbd\xc8\xd7\xeb\x25\x5b\x89\x47\xbe\xdb\xed\xda\xaa\x1e\xe1\xb1\x90\xfd\xac\x0f\xa1\xdd\x1c\xd4\xbf\x9f\xec\x8f\x2b\xed\x41\x7d\x6f\x7c\x3e\xb2\x84\xcf\xab\xef\x77\x8f\xf7\x7b\xed\x94\xfd\x12\xfd\x1c\xff\x6a\x05\xf3\xfd\x6f\x23\xa3\xde\x93\x2e\x49\xbb\xa4\x5b\xd2\x36\xe9\x5a\x19\x69\x87\x74\x43\xda\x22\x5d\x91\xe6\x6a\x26\xdf\x95\x7c\xc5\x6e\xd2\xec\x69\xee\xc7\x92\xdd\x7f\xb8\x42\xf7\xfe\x4e\xd3\x74\x96\x79\xd6\xd3\x47\xa8\x6e\x5f\xb0\x66\x30\xd2\xfd\x9c\x96\x73\x53\xf3\x1b\x00\x6e\x69\xf1\x8e\xb1\x7f\xba\xfe\x58\x8b\xbf\xfc\xe5\xb9\x3f\x65\xda\xf8\x91\x16\x5d\xab\xa0\x52\xc8\xa9\x64\x6a\x2a\xc2\x27\x4f\x60\xaf\x00\x5c\x42\x75\x1c\x2b\xe6\xb3\x0c\x3f\x7f\x02\xff\x98\xe1\x53\x63\xbc\xc1\xfa\xbf\x0e\xe0\xb2\xb6\x1f\xd5\x9b\xe9\x0c\xcf\xeb\xaa\x73\x3f\xc8\xf0\x7c\x9f\xaa\x5f\x0d\x5e\x29\xed\x04\x80\x25\x2d\xa6\xec\x4f\xb4\x38\x63\x3b\x52\x6c\x4a\x74\x62\x21\x7b\x71\xb4\x2a\x5a\x3c\xe8\x1c\x59\x18\x23\xa3\x1b\x36\xd6\x93\xd1\x4d\x0c\x2c\x68\xc0\x38\xcb\x31\x39\x69\xb9\x8e\xe3\xad\x0d\x11\x27\x3e\x39\x5d\xdf\x13\x61\x22\xe0\xc4\xa2\xeb\x88\x76\x6b\x3d\x76\x03\x81\xc0\xed\x25\x0b\x9e\xeb\xb5\xc9\xf5\x43\xc7\x83\x93\xc8\x58\xba\xab\x70\x92\xad\x20\x5b\xe3\x68\xcd\x95\x2e\xc1\x8b\xce\xe2\xed\xc2\xb1\xfd\x93\x7d\xe6\x3e\x99\xd6\xe4\x11\x7c\x33\x70\xf3\x9b\x62\xf1\x6f\xca\xc0\x97\x4b\xea\x99\x4a\xbb\x73\x06\x7f\xd3\xc0\xab\x46\x2c\x4a\xf8\x5f\x79\x35\x9f\x2b\x93\x7f\xb5\x84\xbf\xc4\x07\x35\x9f\x3b\x93\xff\x5e\xd3\x9a\x6e\x07\xcc\x6f\x18\x0d\x33\xcf\xbf\xcb\xfc\x9b\x06\x3e\xcb\x09\x85\x89\xf3\xaa\xd2\xbe\x2e\xa9\xdf\xaf\x14\xd7\x33\xe7\xf7\xbc\x84\xbf\x5d\xc2\x37\xe3\xb7\xda\xb3\xa7\xdb\x0e\xf3\x7b\x06\x6e\xf6\xef\x0d\xa0\xbd\x35\x72\x3b\xe2\x42\x37\x38\x9e\xe1\xef\x9d\xe2\xab\x3e\x0c\x0b\x6a\x93\x1d\x72\xfd\x2a\x1f\x98\x96\x49\x8d\xaf\xde\xcb\x7f\x02\x00\x00\xff\xff\x79\x1b\xc6\x19\x38\x09\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2360,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1641049905, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
