// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/prog1.o
// ebpf/bin/prog2.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProg1O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xbf\x6b\x14\x4f\x14\x7f\x73\x77\xc9\xe5\x7b\xc9\x17\x8c\x20\xc8\x1a\x70\x41\x84\xd8\x6c\x72\x1b\x4d\x15\x21\x04\xa2\x08\x29\x82\x62\x65\xb1\x6e\x36\x13\x73\x5c\xee\x76\xd9\xdd\x04\xe3\x09\x06\xc1\xc2\x4e\x90\xfc\x01\x6a\x67\x63\x79\x95\xd8\x5a\x5e\x69\x99\xd2\xd2\x1f\x85\x16\xc1\x91\x37\xfb\xf6\x47\x66\x77\x3d\x15\x14\x44\x1f\xdc\xce\xcc\xe7\xfd\x9c\xf7\x63\x92\x7b\xcb\x2b\x97\x2a\x8c\x41\x4c\x0c\x3e\x41\x7a\x4a\x69\x71\x2c\xb3\xa7\xef\xff\xc0\xa0\xcf\x40\xca\x3b\xda\xa1\x40\xf4\xd5\xd3\x48\xa6\x5e\x01\x38\x14\x42\x9c\x54\x8c\x3d\x80\x48\xfe\x3a\x4c\xca\x33\xf2\x75\xde\xf1\x70\x1f\xee\x36\xa0\xa7\xbd\x15\x31\x6e\x3b\x9b\x1c\xf7\x4d\xbd\x15\xf4\xb4\x83\x04\x0f\x36\x6d\x1f\xf7\x7c\xdd\x72\x7a\xda\x9b\x04\x9f\xf6\x7c\x17\xf7\xb7\x9a\xe7\xf4\x9e\x36\x88\xe2\x79\x42\xf1\x30\x80\x81\x10\xa2\x5f\x01\xd0\x29\x8e\x51\x00\x18\x81\x13\x92\xdf\xa7\x38\x03\xed\x83\x88\xcf\xdb\x0d\x80\xb6\xf6\x2e\xb1\xdf\x0d\xed\x16\xee\xbb\x81\x7e\xb6\x38\x4e\xc7\xfd\xd9\x38\xed\x6a\xe4\xbf\x28\xde\x33\x99\x78\x7f\x45\x7e\xcd\x3f\x24\xbf\xe6\x6f\xc8\x6f\x9f\xf2\xb8\x4f\x2b\x86\x5d\xa3\x5f\x23\x37\x15\x7f\x37\xfd\xcb\xcd\x70\xc2\x5e\xc4\x3e\xc4\x5e\xc5\x3e\xc5\x5e\xc6\xf7\x0c\x67\x12\xe7\xb1\x98\xef\xb8\x38\x0b\x38\x07\xdb\x8d\xe1\xf6\xcc\x21\xf6\xcc\xa3\xf6\x2e\xaf\xae\x00\x7c\x11\x42\xce\xc5\x31\xb2\xcb\xee\x5c\x85\xb1\xbb\xe3\x6c\x02\x67\x88\x7e\x31\x1d\x54\x86\xdf\xf3\x9a\xec\x83\xf7\x42\xc5\x9f\xc9\x6f\x15\x5e\x2b\xf8\x43\xc2\x3d\xe5\xfd\xba\x4f\xf8\xb4\xe2\xb3\x4d\xf8\xa0\x20\x96\x2a\x54\x73\xd8\x02\x00\x4c\x42\xfa\x47\xab\x46\xeb\x9c\xc4\xff\xcb\xe1\x75\x00\x38\x9e\xb1\x13\xdf\xf9\x85\x94\x1f\x49\xf0\x29\x8a\x77\x5f\xe2\xa3\x39\x5c\xa7\x33\xa3\x99\xd8\x63\xe9\x79\x1c\xe5\x32\x7c\xa9\x6d\x84\xfc\x76\x08\x6d\x9f\x87\x9e\xef\xae\x71\x6b\x67\x23\xb0\x3a\xed\xf5\x96\x0f\x86\xcf\xb7\x12\x7c\x26\xc5\xad\x1d\xee\x07\x2d\xb7\x0b\xd6\x56\xcb\xe1\xdd\x80\x4b\x49\x83\x6f\x5a\x1b\xbe\xdd\xe1\x20\x3b\xc0\x70\xc0\x08\x42\x3f\xb4\xd7\xc0\x08\x76\x3b\xb8\xae\x2c\x2d\xcd\x5a\xf3\x60\xf8\xee\xba\x1d\xda\xc8\x6d\x1a\xcd\xf9\x08\xbe\x10\x2d\x73\xd0\xb1\xbd\x60\xe6\x48\xf3\x44\x1c\x33\xcf\x69\xe6\x2b\xf1\xe3\x74\x43\xd6\x2f\x4f\x7b\xf5\x68\x7d\xa9\xe0\xea\xff\x26\x2c\x9b\xcb\x0c\x2d\x96\xf8\xab\x29\xe7\xd3\x43\xf4\xd5\xde\x1f\x53\xe4\x4e\x01\x64\xba\x29\xa5\x55\x8a\x3f\xee\x87\x09\xba\x67\xac\x1f\xcf\xdd\x73\xf2\xaf\xe6\x40\x27\x60\x8a\x7d\x3b\xfe\x47\x25\xfa\x0b\xb5\xef\xd3\xf7\x49\xdf\x54\xf0\x9b\xd4\xf2\x8f\x15\x3c\x79\x2f\x68\xbd\x58\xe2\xff\xe3\x48\xb1\x3f\xb5\x7e\xe7\x4b\xf4\x3f\x97\xe8\xab\xe7\x2b\xa4\x9f\x7b\x16\xa8\xa0\xb3\x0a\xac\xd6\x6f\xb9\xa4\x7e\x1e\xd5\x2f\xbe\xef\x04\xcd\xb3\x5a\x3f\xa7\xc8\x37\xfa\x25\xff\x7a\x66\xfe\xeb\x19\xfd\xf8\x7d\xfd\x1a\x00\x00\xff\xff\x26\x53\x34\x68\x80\x0b\x00\x00")

func bindataProg1OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProg1O,
		"/prog1.o",
	)
}



func bindataProg1O() (*asset, error) {
	bytes, err := bindataProg1OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/prog1.o",
		size: 2944,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629886547, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProg2O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x68\x13\x4f\x14\xfe\x36\xc9\x2f\xc9\x2f\xb5\xa2\x82\x50\x43\x0e\x73\x54\xc1\x6d\x12\x54\x3c\x69\x29\x68\x3d\xf4\x50\xa4\x07\x4f\xae\xdb\x74\xdb\x86\x34\xc9\xb2\xbb\xd6\xb6\x11\xec\xa5\x50\xbc\x0b\x3d\x08\xe2\x1f\xc4\xb3\x97\xf6\x50\x48\x8f\x1e\x3d\x7a\xec\xd1\x63\x05\xc1\x9b\x23\x6f\x76\x66\xb3\x4e\x76\xdb\xe2\xd5\x3e\xd8\x9d\xf7\xbe\xce\x37\xf3\xe6\xbd\xc9\xd7\x7d\x7e\x77\xfa\x5e\xc6\x30\xa0\xcc\xc0\x4f\x0c\xa2\x81\x3d\x2e\x0e\xfc\x09\xf9\x3e\x0b\x03\x3b\x06\x50\x02\xd0\x2a\x1f\x72\x42\xc7\x0c\xc0\x59\x63\x35\xf2\x99\x69\x9a\xbd\xf2\xb7\x08\x5f\x72\x6a\x8c\x7c\x3b\x60\xad\x5e\xf9\x20\xc2\x6d\xcf\x99\x27\xdf\x6a\xd8\x8d\x5e\xf9\x6b\x84\x5f\xaf\xb3\x26\xf9\x1d\xe6\x2f\xf5\xca\x5f\x42\xbc\x00\x3c\xf5\x9a\x01\xf9\xcd\xce\x22\xeb\xad\x7f\x0e\xf1\x22\x70\xd9\xf5\xba\xe4\x2f\xd6\xaf\xb0\xde\x8b\x7d\x81\xf7\xdf\x84\x39\x17\x0c\x60\x9f\x73\xbe\x93\x01\xea\x00\x36\x01\xe4\x01\x91\x3f\x9d\xb7\x51\xde\x13\xf3\x29\xbe\x2a\xe2\xdd\x90\xff\x41\xf2\xf3\xc0\x1e\xe7\xbc\xff\x4e\xc6\x59\x60\x97\x73\x3e\xa6\x15\xab\x3f\x17\x8e\x3b\xb9\x70\xa4\x7d\x32\x72\xdd\x1f\xc6\x60\xdd\x34\xde\x26\xc2\x7c\xfa\xf9\x30\xbe\x98\xbf\x04\x35\x9f\xd5\x98\x49\xbe\x69\x96\x10\xaf\xab\xcb\x6c\x51\x0f\xd6\x72\xd6\xe2\x75\xed\x3e\x09\x1c\xf2\x3d\xab\x6d\xc7\xeb\x7a\xa3\x5a\x65\x61\xfd\x98\xa7\xea\xaa\xea\x78\x54\xdd\xaa\xb1\xba\xf5\xdf\xca\xbf\x67\x92\xeb\xd2\xb7\x53\xea\x20\xcf\xfb\x32\xba\x6f\x40\x4e\x3e\xa5\x84\x7b\xf7\x2f\xdb\x69\x6d\xd2\x6d\x54\xd6\x05\xa7\xb5\x39\xd2\x48\x13\x49\x0f\x49\x33\x49\x2f\x49\x53\x49\x4f\x49\x73\x49\x6f\x49\x93\x49\x8f\x49\xb3\x49\xaf\xf5\x5a\xea\x7c\xd2\x0e\xd2\x0d\xd2\x16\xd2\x15\x57\x63\x4f\xcd\x4c\xe3\x17\xe7\xfc\x9c\xe4\x1b\xeb\x0f\x50\x7c\x36\x62\x9c\x21\xed\x91\x8f\xb2\x89\xcc\xf1\xf9\xbb\xa2\xcf\xdf\xb9\x8e\x6f\x8b\x77\x16\xd5\x84\x35\xb2\xc8\x0e\x61\x53\x00\xce\xe3\xff\x28\x56\x77\xe7\xb6\xc0\x4b\x43\x78\x01\xc0\x85\xd8\x3a\x2a\xd7\xba\x98\x5f\x88\xf0\x8a\xd4\xf1\x86\xc0\xf3\x43\xf8\x7b\x81\xff\x37\x84\xab\x7f\xb2\x34\x50\x56\xb7\x62\x31\xad\x5e\x89\x4d\x13\x59\x98\x81\xb3\x1a\xa0\xe5\x7a\xdd\x39\xc7\x5a\x59\xf0\xad\x76\x6b\xbe\xe9\xc1\xf4\x9c\xe5\x10\x1c\x1f\x80\x6d\xdb\xf5\xc7\xe9\x65\x85\x7d\x82\xb5\xe2\x78\x7e\xb3\xdb\x81\xb5\xdc\x6c\x38\x1d\xdf\x11\x3c\xd3\x59\xb2\x16\x3c\xbb\xed\x84\x04\x31\x57\x5e\x0a\x88\xb6\x9b\x0d\x98\x7e\xe0\x05\xf6\x1c\x4c\x7f\xad\x2d\x46\xaf\x3b\x6f\x07\x36\xc1\x35\xb3\x76\x13\xd3\x93\x93\x55\xab\x1e\x2e\xf0\xc7\xad\x4a\xe8\xe5\xdf\xd8\xaa\x3a\xbf\x66\x1f\x65\x0b\x3e\x69\xb8\xfe\xed\x62\xc8\x27\xaf\xe1\x13\x29\xfb\xe5\xb4\xb8\x72\x0c\x5f\xbf\xc3\x45\x6d\xde\x98\xec\xaf\x6e\xab\x32\x7f\x26\xe3\x51\x79\x4e\xc5\x57\xbf\x9f\xd7\xf1\x3b\x10\xb3\x0d\xb9\x6f\xc5\x38\x3a\xff\x47\x29\xfc\x57\xd9\x93\xf1\xaf\xa5\xf0\x77\x73\x27\xe3\x6f\x49\x7e\x5d\xc3\x0f\xe4\x4f\xc2\xd5\xf0\x48\x37\xe4\x78\x3f\x65\xff\x99\x7c\xf2\x7e\x7a\xff\xef\xa4\xf0\x67\x53\xf8\x7a\x3c\x2b\xf9\xba\xcc\x3c\x94\xfc\xaa\x86\xeb\xfd\x9f\x49\xe9\xff\xb6\xec\xbf\x3a\x2f\xf5\x7f\x24\xa1\xff\x1b\x09\x7b\x93\x6d\xc9\xfd\x0f\x65\xac\xbe\x15\x14\x5f\xe9\xec\xef\x00\x00\x00\xff\xff\x73\x85\xae\x49\xe0\x0b\x00\x00")

func bindataProg2OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProg2O,
		"/prog2.o",
	)
}



func bindataProg2O() (*asset, error) {
	bytes, err := bindataProg2OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/prog2.o",
		size: 3040,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629886548, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/prog1.o": bindataProg1O,
	"/prog2.o": bindataProg2O,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"prog1.o": {Func: bindataProg1O, Children: map[string]*bintree{}},
		"prog2.o": {Func: bindataProg2O, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
